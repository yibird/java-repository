import{_ as a,o as e,c as l,O as r}from"./chunks/framework.1e38657f.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"db/mysql/sqlOptimize.md","filePath":"db/mysql/sqlOptimize.md","lastUpdated":1708792908000}'),i={name:"db/mysql/sqlOptimize.md"},t=r('<h2 id="sql-语句优化" tabindex="-1">SQL 语句优化 <a class="header-anchor" href="#sql-语句优化" aria-label="Permalink to &quot;SQL 语句优化&quot;">​</a></h2><h3 id="常用查询优化策略" tabindex="-1">常用查询优化策略 <a class="header-anchor" href="#常用查询优化策略" aria-label="Permalink to &quot;常用查询优化策略&quot;">​</a></h3><h4 id="避免使用-select" tabindex="-1">避免使用 SELECT * <a class="header-anchor" href="#避免使用-select" aria-label="Permalink to &quot;避免使用 SELECT \\*&quot;">​</a></h4><h4 id="使用-union-all-代替-union" tabindex="-1">使用 UNION ALL 代替 UNION <a class="header-anchor" href="#使用-union-all-代替-union" aria-label="Permalink to &quot;使用 UNION ALL 代替 UNION&quot;">​</a></h4><h3 id="关联查询优化" tabindex="-1">关联查询优化 <a class="header-anchor" href="#关联查询优化" aria-label="Permalink to &quot;关联查询优化&quot;">​</a></h3><h3 id="子查询优化" tabindex="-1">子查询优化 <a class="header-anchor" href="#子查询优化" aria-label="Permalink to &quot;子查询优化&quot;">​</a></h3><h3 id="排序优化" tabindex="-1">排序优化 <a class="header-anchor" href="#排序优化" aria-label="Permalink to &quot;排序优化&quot;">​</a></h3><h3 id="group-by-优化" tabindex="-1">GROUP BY 优化 <a class="header-anchor" href="#group-by-优化" aria-label="Permalink to &quot;GROUP BY 优化&quot;">​</a></h3><h3 id="分页查询优化" tabindex="-1">分页查询优化 <a class="header-anchor" href="#分页查询优化" aria-label="Permalink to &quot;分页查询优化&quot;">​</a></h3><h2 id="索引优化" tabindex="-1">索引优化 <a class="header-anchor" href="#索引优化" aria-label="Permalink to &quot;索引优化&quot;">​</a></h2><h3 id="索引失效场景" tabindex="-1">索引失效场景 <a class="header-anchor" href="#索引失效场景" aria-label="Permalink to &quot;索引失效场景&quot;">​</a></h3><h3 id="覆盖索引" tabindex="-1">覆盖索引 <a class="header-anchor" href="#覆盖索引" aria-label="Permalink to &quot;覆盖索引&quot;">​</a></h3><h3 id="索引下推" tabindex="-1">索引下推 <a class="header-anchor" href="#索引下推" aria-label="Permalink to &quot;索引下推&quot;">​</a></h3><h3 id="_1-禁止使用-select" tabindex="-1">1.禁止使用 SELECT * <a class="header-anchor" href="#_1-禁止使用-select" aria-label="Permalink to &quot;1.禁止使用 SELECT \\*&quot;">​</a></h3><h3 id="小表驱动大表" tabindex="-1">小表驱动大表 <a class="header-anchor" href="#小表驱动大表" aria-label="Permalink to &quot;小表驱动大表&quot;">​</a></h3><h3 id="使用-union-all-代替-union-1" tabindex="-1">使用 UNION ALL 代替 UNION <a class="header-anchor" href="#使用-union-all-代替-union-1" aria-label="Permalink to &quot;使用 UNION ALL 代替 UNION&quot;">​</a></h3><h3 id="where-语句注意事项" tabindex="-1">WHERE 语句注意事项 <a class="header-anchor" href="#where-语句注意事项" aria-label="Permalink to &quot;WHERE 语句注意事项&quot;">​</a></h3><ul><li>避免在 WHERE 子句中使用函数:使用函数可能导致无法使用索引,应尽量避免在 WHERE 子句中对列进行函数操作,以充分利用索引。</li><li>避免在 WHERE 子句中使用 OR:OR 操作符通常会导致全表扫描,影响性能,应尽量使用 IN 或者 UNION 来替代。</li><li>避免在 WHERE 子句中对字段进行运算:在 WHERE 子句中进行字段运算可能导致无法使用索引,影响查询性能。</li></ul><h3 id="order-by-语句注意事项" tabindex="-1">ORDER BY 语句注意事项 <a class="header-anchor" href="#order-by-语句注意事项" aria-label="Permalink to &quot;ORDER BY 语句注意事项&quot;">​</a></h3><ul><li>避免在 ORDER BY 子句中使用表达式或函数:ORDER BY 子句中使用表达式或函数可能导致无法使用索引,应尽量避免在 ORDER BY 中使用函数或表达式。</li><li>使用索引覆盖:如果 ORDER BY 的列上存在索引,并且查询中只选择了索引列，数据库可以使用索引覆盖（Index Covering）来避免回表操作，提高排序的性能。</li></ul><h3 id="limit-分页" tabindex="-1">LIMIT 分页 <a class="header-anchor" href="#limit-分页" aria-label="Permalink to &quot;LIMIT 分页&quot;">​</a></h3><p>当一次性查询大量数据并返回时,会消耗大量 CPU、内存、带宽等资源,增加 MySQL 服务器压力,极端情况下可能会导致内存溢出,通过 LIMIT 语句可以限制结果集返回条数,可以有效的减少资源消耗和网络传输延迟。LIMIT 的原理是在查询的执行过程中，限制返回的结果集的行数。数据库引擎在执行查询时，会按照查询条件和排序要求获取所有符合条件的记录，然后通过 LIMIT 来截取一定数量的记录返回给用户。当 LIMIT 偏移量很大时,数据库引擎需要跳过大量的记录才能达到指定的偏移位置,这可能导致性能下降。此时,推荐使用游标分页或范围查询等策略进行优化。</p>',22),o=[t];function h(n,d,s,c,u,q){return e(),l("div",null,o)}const E=a(i,[["render",h]]);export{m as __pageData,E as default};
