import{_ as s,o as a,c as n,O as l}from"./chunks/framework.1e38657f.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"base/genericity.md","filePath":"base/genericity.md","lastUpdated":1708792908000}'),p={name:"base/genericity.md"},o=l(`<p>泛型是现代大多数静态类型语言支持的特性之一,旨在保证类型安全性的前提下实现代码的复用。在 JDK5 之前使用对象的引用来实现集合类,但这样会导致在使用集合时需要进行类型转换,并且在编译时无法进行类型检查。为此,JDK5 引入了泛型(Generics)。所谓泛型即泛型化类型参数,就是允许在定义类、接口、方法时使用类型形参,该类型形参(或叫泛型)将在声明变量、创建对象、调用方法时动态地指定(即传入实际的类型参数,也可称为类型实参)。使用泛型可以提高代码的重用性、类型安全性和程序的可读性,例如编写一个支持两个变量相加的方法,正常情况下,定义方法时明确变量类型即可,当需要满足多种类型时则需要定义多种变量类型的方法,这样代码不仅冗余,而且也不利于复用。使用泛型后只需要定义一次方法,参数类型为泛型,使用时传递实际的参数类型。</p><p>未使用泛型且需要支持多种类型时,需要定义多个参数类型不同的方法:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 省略其他类型...</span></span></code></pre></div><p>定义方法时使用泛型参数类型化,调用方法时传入实际的类型:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// T为泛型参数</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 3,调用方法时传递的参数类型为int,因此add方法声明中泛型T为Integer,注意泛型的参数不能是基本类型</span></span>
<span class="line"><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 12,调用方法时传递的参数类型为String,因此add方法声明中泛型T为String</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 省略其他类型调用...</span></span></code></pre></div><h2 id="_1-泛型声明" tabindex="-1">1.泛型声明 <a class="header-anchor" href="#_1-泛型声明" aria-label="Permalink to &quot;1.泛型声明&quot;">​</a></h2><p>Java 泛型支持多种使用方式,允许使用在类、接口、方法以及集合框架中。</p><h3 id="_1-1-泛型类" tabindex="-1">1.1 泛型类 <a class="header-anchor" href="#_1-1-泛型类" aria-label="Permalink to &quot;1.1 泛型类&quot;">​</a></h3><p>当一个类使用泛型时该类被称为泛型类,泛型参数被一对尖括号包裹,并且允许定义多个泛型参数。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Animal</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 使用泛型,约束属性value的类型为类定义的泛型</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">say</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_1-2-泛型接口" tabindex="-1">1.2 泛型接口 <a class="header-anchor" href="#_1-2-泛型接口" aria-label="Permalink to &quot;1.2 泛型接口&quot;">​</a></h3><p>当一个接口使用泛型时该接口被称为泛型接口,其使用方式与泛型类类似。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Action</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_1-3-泛型方法" tabindex="-1">1.3 泛型方法 <a class="header-anchor" href="#_1-3-泛型方法" aria-label="Permalink to &quot;1.3 泛型方法&quot;">​</a></h3><p>当一个方法使用泛型时该方法被称泛型方法,在 Java 中,泛型可以用于静态方法和非静态方法,两者在使用方式有所差异。</p><ul><li>静态方法泛型:在静态方法中使用泛型时,需要在方法声明之前指定泛型参数。静态方法无法直接访问类的泛型参数,因为泛型参数是与实例相关联的,而静态方法是与类本身相关联的。因此,静态方法的泛型参数必须在方法签名中声明。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 静态方法中的泛型参数在方法签名中声明</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">staticMethod</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 静态方法的主体</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>非静态方法泛型:在非静态方法中,泛型参数可以直接使用类中定义的泛型参数。在这种情况下,非静态方法可以直接访问类的泛型参数。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Example</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 非静态方法中可以直接使用类的泛型参数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nonStaticMethod</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 非静态方法的主体</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_1-4-集合框架" tabindex="-1">1.4 集合框架 <a class="header-anchor" href="#_1-4-集合框架" aria-label="Permalink to &quot;1.4 集合框架&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 定义String类型的List,通过构造器实例化时允许忽略泛型类型,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * new ArrayList&lt;String&gt;() 可以简写为 new ArrayList&lt;&gt;()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 声明一个map结构,key类型为String,value类型为String</span></span>
<span class="line"><span style="color:#C792EA;">Map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HashMap</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 声明一个set结构,元素类型为String</span></span>
<span class="line"><span style="color:#C792EA;">Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> set </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HashSet</span><span style="color:#89DDFF;">&lt;&gt;();</span></span></code></pre></div><h2 id="_2-泛型通配符" tabindex="-1">2.泛型通配符 <a class="header-anchor" href="#_2-泛型通配符" aria-label="Permalink to &quot;2.泛型通配符&quot;">​</a></h2><p>Java 泛型通配符提供了一种灵活的机制,可以减少对类型转换的需求,使得代码可以更通用、更具有扩展性。例如:</p><ul><li>T:泛型 T 表示一个具体的类型。</li><li>K:泛型 K 表示键值中的 key 类型。</li><li>V:泛型 V 表示键值结构中的 value 类型。</li><li>E:泛型 E 表示元素(Element)类型。</li><li>?:?通配符表示未知的类型。</li></ul><h3 id="_2-1-未知类型通配符" tabindex="-1">2.1 未知类型通配符 <a class="header-anchor" href="#_2-1-未知类型通配符" aria-label="Permalink to &quot;2.1 未知类型通配符&quot;">​</a></h3><p>在 Java 泛型中,通配符 ? 表示未知类型,被称为未限定通配符或者未知类型通配符。这个通配符可以用于表示各种不同的泛型类型,但在使用时有一些限制。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// (1).在方法参数中使用。processList允许接受任意类型的List,但在方法内部无法对列表中的元素进行具体类型的操作</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">processList</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 处理未知类型的列表</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (2).在集合中使用。创建一个接受任意类型元素的集合,由于不知道具体类型,无法添加除null之外的任何元素</span></span>
<span class="line"><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> myList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span></code></pre></div><p>?通配符的限制:</p><ul><li>无法添加除 null 之外的任何元素。对于 <code>List&lt;?&gt;</code> 或类似的通配符类型,无法添加除 null 之外的任何元素。由于不明确具体类型,因此,无法保证类型安全。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// list.add(&quot;example&quot;); // 编译错误,无法添加元素</span></span></code></pre></div><ul><li>只能读取元素。从未知类型通配符的集合中读取元素时,由于不知道具体类型,因此只能使用 Object 类型接收。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> myList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="_2-2-泛型上界通配符-extends-t" tabindex="-1">2.2 泛型上界通配符 ? extends T <a class="header-anchor" href="#_2-2-泛型上界通配符-extends-t" aria-label="Permalink to &quot;2.2 泛型上界通配符 ? extends T&quot;">​</a></h3><p>泛型上界通配符 <code>? extends T</code> 在 Java 泛型中用于表示某种类型的子类型。它限制了通配符表示的类型必须是指定类型 T 或其子类型,这允许安全地读取从泛型类型中获取的数据,但不能向其添加数据,因为无法确定具体的子类型。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">fly</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NumberExample</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 约束泛型类型需要继承自Number类型,即传入的泛型类型必须是Number的子类型</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">list</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;font-style:italic;">::</span><span style="color:#A6ACCD;">println</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Integer、Double、Float、Long等等都继承自Number</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Integer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> integerList  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Double</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> doubleList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4.0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Float</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> floatList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.0f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4F</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Long</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> longList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1L</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2L</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3L</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4L</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">integerList</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">doubleList</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">floatList</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">longList</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2-3-泛型下界通配符-super-t" tabindex="-1">2.3 泛型下界通配符 ? super T <a class="header-anchor" href="#_2-3-泛型下界通配符-super-t" aria-label="Permalink to &quot;2.3 泛型下界通配符 ? super T&quot;">​</a></h3><p>泛型下界通配符 <code>? super T</code> 在 Java 泛型中用于表示某种类型的父类型。它限制了通配符表示的类型必须是指定类型 T 或其父类型。这使得可以向集合中添加类型为 T 或其父类型的元素,但在读取时只能以 Object 类型接收,因为无法确定具体的父类型。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">fly</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NumberExample</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 约束传递的泛型类型需要是Integer的父类型</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">super</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Integer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">list</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 由于泛型下界通配符限制类型为指定类型 T 或其父类型,在获取元素无法精确得知具体类型,因此只能使用Object类型接收</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> firstItem </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;font-style:italic;">::</span><span style="color:#A6ACCD;">println</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Integer继承自Number类,因此除了Integer本身外,也支持Number类</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Integer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> integerList  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> numberList  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">integerList</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">numberList</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_3-泛型原理" tabindex="-1">3.泛型原理 <a class="header-anchor" href="#_3-泛型原理" aria-label="Permalink to &quot;3.泛型原理&quot;">​</a></h2><p>Java 泛型通过类型擦除(Type Erasure)来实现的。这意味着在编译时,泛型的类型信息会被擦除,而在运行时,Java 虚拟机操作的是擦除后的原始类型。这样做的目的是为了与之前的非泛型代码兼容,同时保持对已有 Java 虚拟机的支持。</p><h3 id="_3-1-类型擦除" tabindex="-1">3.1 类型擦除 <a class="header-anchor" href="#_3-1-类型擦除" aria-label="Permalink to &quot;3.1 类型擦除&quot;">​</a></h3><p><strong>Java 的类型擦除是指在编译时所有泛型类型参数都会被擦除,泛型的类型参数会被替换为它们的上界(对于没有指定上界的类型参数,默认是 Object)。类型擦除降低了在运行时保留泛型类型信息的开销,有助于减少程序在内存使用和性能方面的负担,而且类型擦除还支持向后兼容,可以提高代码的灵活性</strong>。例如:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Book</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setValue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getValue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 编译.java文件,生成一个.class字节码文件</span></span>
<span class="line"><span style="color:#FFCB6B;">javac</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;">\\B</span><span style="color:#C3E88D;">ook.java</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 反编译字节码文件,-verbose表示输出详细信息</span></span>
<span class="line"><span style="color:#FFCB6B;">javap</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;">\\B</span><span style="color:#C3E88D;">ook.class</span></span></code></pre></div><p>上述例子中,通过 javac 命令编译 Book.java 文件产生一个 Book.class 字节码文件,并使用 javap 命令反编译该字节码文件</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">com</span><span style="color:#A6ACCD;">.fly.Book</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> java.lang.</span><span style="color:#FFCB6B;">Object</span></span>
<span class="line"><span style="color:#A6ACCD;">  minor version: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">  major version: 65</span></span>
<span class="line"><span style="color:#A6ACCD;">  flags: (0x0021) </span><span style="color:#FFCB6B;">ACC_PUBLIC</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ACC_SUPER</span></span>
<span class="line"><span style="color:#A6ACCD;">  this_class: #8                          </span><span style="color:#676E95;font-style:italic;">// com/fly/Book</span></span>
<span class="line"><span style="color:#A6ACCD;">  super_class: #2                         </span><span style="color:#676E95;font-style:italic;">// java/lang/Object</span></span>
<span class="line"><span style="color:#A6ACCD;">  interfaces: 0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fields: 1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> methods: 3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> attributes: 2</span></span>
<span class="line"><span style="color:#FFCB6B;">Constant</span><span style="color:#A6ACCD;"> pool:</span></span>
<span class="line"><span style="color:#A6ACCD;">   #1 = </span><span style="color:#FFCB6B;">Methodref</span><span style="color:#A6ACCD;">          #2.#3          </span><span style="color:#676E95;font-style:italic;">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">   #2 = </span><span style="color:#FFCB6B;">Class</span><span style="color:#A6ACCD;">              #4             </span><span style="color:#676E95;font-style:italic;">// java/lang/Object</span></span>
<span class="line"><span style="color:#A6ACCD;">   #3 = </span><span style="color:#FFCB6B;">NameAndType</span><span style="color:#A6ACCD;">        #5:#6          </span><span style="color:#676E95;font-style:italic;">// &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">   #4 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               java/lang/</span><span style="color:#FFCB6B;">Object</span></span>
<span class="line"><span style="color:#A6ACCD;">   #5 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">init</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   #6 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               ()</span><span style="color:#FFCB6B;">V</span></span>
<span class="line"><span style="color:#A6ACCD;">   #7 = </span><span style="color:#FFCB6B;">Fieldref</span><span style="color:#A6ACCD;">           #8.#9          </span><span style="color:#676E95;font-style:italic;">// com/fly/Book.value:Ljava/lang/Object;</span></span>
<span class="line"><span style="color:#A6ACCD;">   #8 = </span><span style="color:#FFCB6B;">Class</span><span style="color:#A6ACCD;">              #10            </span><span style="color:#676E95;font-style:italic;">// com/fly/Book</span></span>
<span class="line"><span style="color:#A6ACCD;">   #9 = </span><span style="color:#FFCB6B;">NameAndType</span><span style="color:#A6ACCD;">        #11:#12        </span><span style="color:#676E95;font-style:italic;">// value:Ljava/lang/Object;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #10 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               com/fly/</span><span style="color:#FFCB6B;">Book</span></span>
<span class="line"><span style="color:#A6ACCD;">  #11 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               value</span></span>
<span class="line"><span style="color:#A6ACCD;">  #12 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">Ljava</span><span style="color:#A6ACCD;">/lang/</span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #13 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">Signature</span></span>
<span class="line"><span style="color:#A6ACCD;">  #14 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">TT</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #15 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">Code</span></span>
<span class="line"><span style="color:#A6ACCD;">  #16 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">LineNumberTable</span></span>
<span class="line"><span style="color:#A6ACCD;">  #17 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               setValue</span></span>
<span class="line"><span style="color:#A6ACCD;">  #18 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               (</span><span style="color:#FFCB6B;">Ljava</span><span style="color:#A6ACCD;">/lang/</span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;">;)</span><span style="color:#FFCB6B;">V</span></span>
<span class="line"><span style="color:#A6ACCD;">  #19 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               (</span><span style="color:#FFCB6B;">TT</span><span style="color:#A6ACCD;">;)</span><span style="color:#FFCB6B;">V</span></span>
<span class="line"><span style="color:#A6ACCD;">  #20 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               getValue</span></span>
<span class="line"><span style="color:#A6ACCD;">  #21 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               ()</span><span style="color:#FFCB6B;">Ljava</span><span style="color:#A6ACCD;">/lang/</span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #22 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               ()</span><span style="color:#FFCB6B;">TT</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #23 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;">:</span><span style="color:#C792EA;">Ljava</span><span style="color:#A6ACCD;">/</span><span style="color:#C792EA;">lang</span><span style="color:#A6ACCD;">/</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;">;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#FFCB6B;">Ljava</span><span style="color:#A6ACCD;">/lang/</span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #24 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">SourceFile</span></span>
<span class="line"><span style="color:#A6ACCD;">  #25 = </span><span style="color:#FFCB6B;">Utf8</span><span style="color:#A6ACCD;">               </span><span style="color:#FFCB6B;">Book</span><span style="color:#A6ACCD;">.java</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> com.fly.</span><span style="color:#82AAFF;">Book</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: ()V</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: (0x0001) ACC_PUBLIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack=1, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#A6ACCD;">         0: aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">         1: invokespecial #1                  </span><span style="color:#676E95;font-style:italic;">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">         4: return</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 8: 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setValue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">T</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: (Ljava/lang/Object</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">)</span><span style="color:#C792EA;">V</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: (0x0001) ACC_PUBLIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack=2, locals=2, args_size=2</span></span>
<span class="line"><span style="color:#A6ACCD;">         0: aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">         1: aload_1</span></span>
<span class="line"><span style="color:#A6ACCD;">         2: putfield      #7                  </span><span style="color:#676E95;font-style:italic;">// Field value:Ljava/lang/Object;</span></span>
<span class="line"><span style="color:#A6ACCD;">         5: return</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 12: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 13: 5</span></span>
<span class="line"><span style="color:#A6ACCD;">    Signature: #19                          </span><span style="color:#676E95;font-style:italic;">// (TT;)V</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getValue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: ()Ljava/lang/Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: (0x0001) ACC_PUBLIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack=1, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#A6ACCD;">         0: aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">         1: getfield      #7                  </span><span style="color:#676E95;font-style:italic;">// Field value:Ljava/lang/Object;</span></span>
<span class="line"><span style="color:#A6ACCD;">         4: areturn</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 16: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">    Signature: #22                          </span><span style="color:#676E95;font-style:italic;">// ()TT;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">Signature</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #</span><span style="color:#F78C6C;">23</span><span style="color:#A6ACCD;">                          </span><span style="color:#676E95;font-style:italic;">// &lt;T:Ljava/lang/Object;&gt;Ljava/lang/Object;</span></span>
<span class="line"><span style="color:#A6ACCD;">SourceFile</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Book.java</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>从反编译结果来看,经过编译后的泛型参数会进行类型擦除,泛型参数类型会使用 Object 类型进行替换。Ljava/lang/Object 是在 Java 字节码中表示 java.lang.Object 类的描述符。在 Java 字节码中,类和接口的描述符用字符串表示,以 L 开头,以 ; 结尾，中间是完整的类或接口的二进制名称(包括包路径,用 / 分隔)。</p><h3 id="_3-2-类型擦除的局限性" tabindex="-1">3.2 类型擦除的局限性 <a class="header-anchor" href="#_3-2-类型擦除的局限性" aria-label="Permalink to &quot;3.2 类型擦除的局限性&quot;">​</a></h3><h4 id="_3-2-1-可能会出现运行时异常" tabindex="-1">3.2.1 可能会出现运行时异常 <a class="header-anchor" href="#_3-2-1-可能会出现运行时异常" aria-label="Permalink to &quot;3.2.1 可能会出现运行时异常&quot;">​</a></h4><p>由于类型擦除会在编译时将泛型参数替换为 Object,因此,Java 泛型无法在运行时获取具体的泛型类型,在类型转换下可能会出现 ClassCastException(类转换)异常。例如:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">zchengfeng</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Integer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> intList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Integer</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 类型转换错误,抛出ClassCastException异常</span></span></code></pre></div><h4 id="_3-2-2-泛型类型参数不能是基本类型" tabindex="-1">3.2.2 泛型类型参数不能是基本类型 <a class="header-anchor" href="#_3-2-2-泛型类型参数不能是基本类型" aria-label="Permalink to &quot;3.2.2 泛型类型参数不能是基本类型&quot;">​</a></h4><p>由于 Java 泛型是通过类型擦除实现的,而基本类型在 Java 中属于非引用类型,因此,基本类型无法作为泛型类型的参数。在使用泛型时必须使用对应的包装类(Wrapper Classes)作为泛型类型参数。</p><h4 id="_3-2-3-无法创建泛型类型的实例" tabindex="-1">3.2.3 无法创建泛型类型的实例 <a class="header-anchor" href="#_3-2-3-无法创建泛型类型的实例" aria-label="Permalink to &quot;3.2.3 无法创建泛型类型的实例&quot;">​</a></h4><p>由于类型擦除的存在,Java 泛型无法在运行时创建泛型类型的实例。例如,无法使用 new T()创建一个泛型类型 T 的实例,经过类型擦除后,T 被转为 Object 类型,因此也无法创建泛型数组。</p><h4 id="_3-2-4-泛型类型参数不能使用-instantof" tabindex="-1">3.2.4 泛型类型参数不能使用 instantof <a class="header-anchor" href="#_3-2-4-泛型类型参数不能使用-instantof" aria-label="Permalink to &quot;3.2.4 泛型类型参数不能使用 instantof&quot;">​</a></h4><p>泛型参数类型经过类型擦除后,无法在运行时无法直接获取泛型类型参数的具体类型信息。因此,无法在运行时使用 instanceof 操作符来检查一个对象是否是某个泛型类型的实例。</p><h4 id="_3-2-5-无法重载泛型方法" tabindex="-1">3.2.5 无法重载泛型方法 <a class="header-anchor" href="#_3-2-5-无法重载泛型方法" aria-label="Permalink to &quot;3.2.5 无法重载泛型方法&quot;">​</a></h4><p>在类型擦除的过程中,方法的参数和返回类型的泛型信息被擦除,编译器无法在运行时识别它们的具体类型。这种擦除可能导致编译器无法区分两个在类型参数上有不同约束的泛型方法,从而无法重载泛型方法。</p><p>在下述例子中,由于类型擦除,两个 process 方法的实际签名在运行时变得相同,都变成了 Object process(Object value)。因此,编译器会报告方法重载冲突。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">process</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 处理逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">U</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">process</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">U</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 处理逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>要解决这个问题,可以通过方法的参数列表来进行重载,而不是仅依赖于返回类型。例如:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">process</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">clazz</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 处理逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">U</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">process</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">U</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">clazz</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 处理逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这种情况下,通过为方法添加额外的参数<code>(Class&lt;T&gt; 或 Class&lt;U&gt;)</code>,可以区分两个方法.因为它们的参数列表不同.而类型擦除不会影响这些参数的具体类型。</p><h3 id="_3-3-运行时获取泛型类型" tabindex="-1">3.3 运行时获取泛型类型 <a class="header-anchor" href="#_3-3-运行时获取泛型类型" aria-label="Permalink to &quot;3.3 运行时获取泛型类型&quot;">​</a></h3><p>由于类型擦除的存在,直接在运行时获取泛型的具体类型是比较困难的。在运行时,泛型的类型信息会被擦除,导致无法直接获取泛型参数的具体类型,不过,可以通过一些方法来近似获取或传递类型信息:</p><ul><li>通过传递 Class 对象。</li><li>通过反射获取泛型类型。</li></ul><p>这两种方法都是近似的方式,无法完全获取泛型参数的具体类型,而只能获取泛型参数的上界。</p><h4 id="_3-3-1-通过传递-class-对象获取泛型类型" tabindex="-1">3.3.1 通过传递 Class 对象获取泛型类型 <a class="header-anchor" href="#_3-3-1-通过传递-class-对象获取泛型类型" aria-label="Permalink to &quot;3.3.1 通过传递 Class 对象获取泛型类型&quot;">​</a></h4><p>通过在构造函数中传递 <code>Class&lt;T&gt;</code>对象,并通过该对象的 newInstance()创建一个泛型参数类型的实例,可以在运行时获取泛型参数的类型信息。注意,这种方式要求泛型参数类型具有无参构造函数。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Example</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Example</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">type</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createInstance</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IllegalAccessException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InstantiationException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IllegalAccessException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InstantiationException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 向构造器传递一个Class对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Example</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> example </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Example</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 通过Class对象的newInstance()创建一个泛型参数类型的实例,从而获取泛型类型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Number</span><span style="color:#A6ACCD;"> instance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> example</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="_3-3-2-通过反射获取泛型类型" tabindex="-1">3.3.2 通过反射获取泛型类型 <a class="header-anchor" href="#_3-3-2-通过反射获取泛型类型" aria-label="Permalink to &quot;3.3.2 通过反射获取泛型类型&quot;">​</a></h4><p>通过反射获取泛型超类的 ParameterizedType,然后使用 getActualTypeArguments() 获取泛型参数的类型信息。这种方法适用于获取泛型父类的类型信息。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Example</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getType</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * ParameterizedType 是 Java 反射库中的一个接口,用于表示参数化类型。它是 Type 接口的子接口,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * 用于表示具有实际类型参数的泛型类型。在使用泛型时,如果类或接口是参数化的,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * 可以使用 ParameterizedType 获取其参数化类型信息</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ParameterizedType</span><span style="color:#A6ACCD;"> superClass </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ParameterizedType</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getClass</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getGenericSuperclass</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取表示此类型实际类型参数的 Type 对象数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Type</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> types </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> superClass</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getActualTypeArguments</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#A6ACCD;"> types</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Example</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> instance </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Example</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getType</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,74),e=[o];function t(c,r,y,C,D,A){return a(),n("div",null,e)}const E=s(p,[["render",t]]);export{i as __pageData,E as default};
