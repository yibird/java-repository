import{_ as s,o as a,c as n,O as l}from"./chunks/framework.1e38657f.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"base/reflect.md","filePath":"base/reflect.md","lastUpdated":1708792908000}'),o={name:"base/reflect.md"},p=l(`<p>Java 反射机制是指在 Java 应用运行中,对于任意一个类,都可以获取该类的所有属性和方法; 对于任意一个对象,都可以调用它的任意一个方法和属性。这种在运行时动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。</p><h2 id="_1-反射基础" tabindex="-1">1.反射基础 <a class="header-anchor" href="#_1-反射基础" aria-label="Permalink to &quot;1.反射基础&quot;">​</a></h2><h3 id="_1-1-class-类" tabindex="-1">1.1 Class 类 <a class="header-anchor" href="#_1-1-class-类" aria-label="Permalink to &quot;1.1 Class 类&quot;">​</a></h3><p>Class 位于 java.lang 包下,Class 类的实例表示 java 应用运行时的类(class ans enum)或接口(interface and annotation),在 Java 中每个 java 类运行时都在 JVM 里表现为一个 Class 对象,可通过类名.class、类型.getClass()、Class.forName(&quot;类名&quot;)等方法获取 Class 对象。数组同样也被映射为 Class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。基本类型 boolean、byte、char、short、int、long、float、double 和关键字 void 同样表现为 Class 对象。</p><h3 id="_1-2-类加载过程" tabindex="-1">1.2 类加载过程 <a class="header-anchor" href="#_1-2-类加载过程" aria-label="Permalink to &quot;1.2 类加载过程&quot;">​</a></h3><h2 id="_2-使用反射" tabindex="-1">2.使用反射 <a class="header-anchor" href="#_2-使用反射" aria-label="Permalink to &quot;2.使用反射&quot;">​</a></h2><p>在 Java 中,Class 类与<code>java.lang.reflect</code>包对反射提供了大力支持,除了 Class 类外 Java 还提供了<code>Constructor</code>、<code>Method</code>、 <code>Field</code>用于分别操作类的构造方法、方法、字段。</p><ul><li>Constructor 类表示 Class 对象类的构造方法,利用它可以在运行时动态创建对象。</li><li>Method 类表示 Class 对象所表示的类的成员方法,通过它可以动态调用对象的方法(包含 private)。</li><li>Field 类表示 Class 对象类的成员字段属性,通过它可以在运行时动态修改成员变量的属性值(包含 private)。</li></ul><h3 id="_2-1-class" tabindex="-1">2.1 Class <a class="header-anchor" href="#_2-1-class" aria-label="Permalink to &quot;2.1 Class&quot;">​</a></h3><p>在类加载的时候,JVM 会创建一个 Class 对象,Class 类提供非常丰富的 API 用于操作 Class 对象,例如创建 Class 实例、获取 Class 全限定名、 获取 Class 构造方法、获取 Class 方法、获取 Class 字段等等。Java 中提供了三种方式用于获取 Class 对象:</p><ul><li>通过类名获取 Class 实例。</li><li>通过对象的 getClass()获取 Class 实例。</li><li>通过 <code>Class.forName()</code>根据全限定类名获取 Class 实例。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/** 获取Class实例的三种方式 **/</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getClassInstance</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">throws Exception</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 方式1:直接通过类名获取Class实例</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">根据类名获取Class实例:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">Test</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 方式2:通过类对象的getClass()获取Class实例</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">类对象的getClass()获取Class实例:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Test</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getClass</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 方式3:通过Class.forName()根据全限定类名反射方式获取Class实例</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Class.forName()根据全限定类名获取Class实例:</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">Class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">reflect.Test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Class API 如下:</p><table><thead><tr><th>api 名称</th><th>描述</th></tr></thead><tbody><tr><td>Class.forName(String className)</td><td>根据全限定类名返回一个 Class 对象。</td></tr><tr><td>getName()</td><td>以字符串的形式返回 class 全限定类名(包含包名和类名)。</td></tr><tr><td>getSimpleName()</td><td>以字符串的形式返回 class 的类名(不包含包名)。</td></tr><tr><td>getTypeName()</td><td>以字符串的形式返回类的类型名称(包含包名和类名)。</td></tr><tr><td>getPackage()</td><td>获取类所处包的 package 实例。通过 package 实例的 getName()可以获取类所在包名。</td></tr><tr><td>newInstance()</td><td>创建类的新实例。该类被实例化,就像是由一个带有空参数列表的新表达式实例化一样。如果尚未初始化该类,则初始化该类。</td></tr><tr><td>getModifiers()</td><td>获取 class 的修饰符,返回一个 int 值</td></tr><tr><td><strong>getInterfaces()</strong></td><td>获取 class 实现的接口列表,返回一个 Class 数组。</td></tr><tr><td><strong>getConstructors()</strong></td><td>获取 class 中所有非 private 修饰的构造函数,返回一个 Constructor 数组。</td></tr><tr><td><strong>getDeclaredConstructors()</strong></td><td>获取 class 中所有构造函数,返回一个 Constructor 数组。</td></tr><tr><td><strong>getConstructor(Class&lt;?&gt;... parameterTypes)</strong></td><td>根据参数类型返回一个非 private 修饰构造函数(Constructor),如果不传递参数类型,则获取无参构造函数。</td></tr><tr><td><strong>getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</strong></td><td>根据参数类型返回一个构造函数(Constructor),如果不传递参数类型,则获取无参构造函数。</td></tr><tr><td><strong>getMethods()</strong></td><td>获取 class 中所有非 private 修饰的方法,返回一个 Method 数组。</td></tr><tr><td><strong>getDeclaredMethods()</strong></td><td>获取 class 中的所有方法,返回一个 Method 数组。</td></tr><tr><td><strong>getMethod(String name, Class&lt;?&gt;... parameterTypes)</strong></td><td>根据方法名称和方法参数获取一个非 private 修饰的方法,返回一个 Method 对象。</td></tr><tr><td><strong>getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</strong></td><td>根据方法名称和方法参数获取一个方法,返回一个 Method 对象。</td></tr><tr><td><strong>getFields()</strong></td><td>获取 class 中所有非 private 修饰的字段,返回一个 Field 数组。</td></tr><tr><td><strong>getDeclaredFields()</strong></td><td>获取 class 中所有的字段,返回一个 Field 数组。</td></tr><tr><td><strong>getField(String name)</strong></td><td>根据字段名获取 class 中非 private 修饰的字段,返回一个 Field。</td></tr><tr><td><strong>getDeclaredField(String name)</strong></td><td>根据字段名获取 class 中的字段,返回一个 Field。</td></tr><tr><td>getClassLoader()</td><td>返回类的类加载器。一些实现可能使用 null 来表示 Bootstrap Class Loader(引导类加载器)。如果该类由引导类加载器加载,则该方法在此类实现中将返回 null。</td></tr><tr><td>getSuperclass()</td><td>获取当前类的父类(最近的父类,Java 中最顶层的类为<code>java.lang.Object</code>),返回一个 Class。如果该类表示对象类、接口、基元类型或 void,则返回 null;如果此对象表示数组类,则返回表示对象类的类对象。例如:<code>class Test extends Null</code>,Test 类的父类是 Null(Test 显式继承 Null),如果 Test 未显式继承任意类,则 Test 类的父类是 Object。</td></tr><tr><td>getSigners()</td><td>返回当前 class 的签名者(Object[]),如果没有签名者,则为 null。如果此对象表示基元类型或 void,则此方法返回 null。</td></tr><tr><td>getResource()</td><td>查找具有给定名称的资源(返回一个 java.net.URL 对象)。用于搜索与给定类关联的资源的规则由该类的定义类加载器实现。此方法委托给此对象的类加载器,如果此对象由引导类加载器加载,则该方法将委托给 ClassLoader.getSystemResource。</td></tr><tr><td>getResourceAsStream()</td><td>查找具有给定名称的资源(返回一个 InputStream)。用于搜索与给定类关联的资源的规则由该类的定义类加载器实现。此方法委托给此对象的类加载器,如果此对象由引导类加载器加载,则该方法将委托给 ClassLoader.getSystemResourceAsStream。</td></tr><tr><td>isAssignableFrom()</td><td></td></tr><tr><td>isAnnotation()</td><td>判断当前 class 是否是注解类,返回一个 boolean 值。</td></tr><tr><td>isInterface()</td><td>判断当前 class 是否是接口,返回一个 boolean 值。</td></tr><tr><td>isAnonymousClass()</td><td>判断当前 class 是否是匿名类,返回一个 boolean 值。</td></tr><tr><td>isEnum()</td><td>判断当前 class 是否是枚举类,返回一个 boolean 值。</td></tr><tr><td>isArray()</td><td>判断当前 class 是否是数组类,返回一个 boolean 值。</td></tr><tr><td>isLocalClass()</td><td>判断当前 class 是否是本地类,返回一个 boolean 值。</td></tr><tr><td>isMemberClass()</td><td>判断当前 class 是否是成员类,返回一个 boolean 值。</td></tr><tr><td>isPrimitive()</td><td>判断当前 class 是否是基元类型,返回一个 boolean 值。</td></tr><tr><td>isSynthetic()</td><td>判断当前 class 是否是合成类,返回一个 boolean 值。</td></tr></tbody></table><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Constructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Method</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Arrays</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReflectExample</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InstantiationException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IllegalAccessException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">NoSuchMethodException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Class实例</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Dog</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> cls </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 返回Class的全限定类名</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// reflect.Dog</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 返回Class的类名(不包含包名)</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSimpleName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Dog</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 返回Class的类型名称(包含包名和类名)</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTypeName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// reflect.Dog</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 返回Class所在包的名称</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPackage</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// reflect</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建类的新实例</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> dog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        dog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">大黄</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;大黄&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Class实现的接口列表,返回一个Class数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;[]</span><span style="color:#A6ACCD;"> interfaces </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInterfaces</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">interfaces</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// java.io.Serializable</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Class中非private修饰的构造函数,返回一个Constructor数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Constructor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;[]</span><span style="color:#A6ACCD;"> constructors01 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getConstructors</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">constructors01</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// reflect.Dog reflect.Dog</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Class中所有构造函数,返回一个Constructor数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Constructor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;[]</span><span style="color:#A6ACCD;"> constructors02 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredConstructors</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">constructors02</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// reflect.Dog reflect.Dog reflect.Dog</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Class中非private修饰的方法,返回一个Method数组(包括从父类继承的方法)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Method</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> methods01 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMethods</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">methods01</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// getAge setAge getName setName eat wait wait wait equals toString hashCode getClass notify notifyAll</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Class中所有的方法,返回一个Method数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Method</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> methods02 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredMethods</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">methods02</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// getAge setAge getName setName getName</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 根据方法名和方法参数的类型获取Method</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Method</span><span style="color:#A6ACCD;"> method </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredMethod</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// setName</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取当前Class的类加载器</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClassLoader</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取当前Class的父类</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">super</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Dog</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> superclass </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSuperclass</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">superclass</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// reflect.Animal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断当前Class是否是一个Annotation</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isAnnotation</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断当前Class是否是interface</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isInterface</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断当前Class是否是枚举类</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isEnum</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断当前Class是否是数组类</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2-2-constructor" tabindex="-1">2.2 Constructor <a class="header-anchor" href="#_2-2-constructor" aria-label="Permalink to &quot;2.2 Constructor&quot;">​</a></h3><p>Constructor 表示 Class 对象的构造方法,Constructor 对象可以通过 Class 对象的<code>getConstructors()</code>方法类中所有的构造方法实例。Constructor 的方法如下:</p><table><thead><tr><th>api 名称</th><th>描述</th></tr></thead><tbody><tr><td>newInstance(Object ... initargs)</td><td>调用 Class 对象所代表的构造函数创建的新对象。</td></tr><tr><td>getName()</td><td>以字符串形式返回此构造函数的名称(包名+类名)。</td></tr><tr><td>getModifiers()</td><td>获取构造函数的修饰符,返回一个 int 值。</td></tr><tr><td>getParameterCount()</td><td>获取构造函数参数数量,返回一个 int 值。</td></tr><tr><td>getParameterTypes()</td><td>获取构造函数参数类型,返回一个 Class 数组</td></tr><tr><td>getParameters()</td><td>获取构造函数的参数,返回一个 Parameter 数组。</td></tr><tr><td>getDeclaringClass()</td><td>返回表示类或接口的类对象。</td></tr><tr><td>getClass()</td><td>返回运行时的非 private 修饰的类对象(即 java.lang.reflect.Constructor)。</td></tr><tr><td>getDeclaringClass()</td><td>返回运行时的类对象。</td></tr><tr><td>getAnnotations()</td><td>获取构造函数上所有非 private 修饰的注解,返回一个 Annotation 数组。</td></tr><tr><td><code>getAnnotation(Class&lt;T&gt; annotationClass</code>)</td><td>根据指定类获取构造函数上非 private 修饰的注解,若构造函数存在对应的注解,则返回该注解,否则返回 null。</td></tr><tr><td>getDeclaredAnnotations()</td><td>返回构造函数上所有注解(包含 private 修饰的注解),返回一个 Annotation 数组。</td></tr><tr><td><code>getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code></td><td>根据指定类获取构造函数上修饰的注解,若构造函数存在对应的注解,则返回该注解,否则返回 null。</td></tr><tr><td>getExceptionTypes()</td><td>获取构造函数抛出的异常信息,返回一个类对象数组,如果构造函数未抛出错误,则返回一个空类对象数组。</td></tr><tr><td>getGenericExceptionTypes()</td><td>返回一个类型对象数组(Type[]),该数组表示声明由此可执行对象引发的异常。如果基础可执行文件在其 throws 子句中未声明任何异常,则返回长度为 0 的数组。/</td></tr><tr><td>getGenericParameterTypes()</td><td>返回一个类型对象数组(Type[]),该数组表示构造函数的参数类型列表。</td></tr><tr><td>isSynthetic()</td><td>判断构造函数是否是合成构造函数,返回一个 boolean 值。</td></tr><tr><td>isVarArgs()</td><td>判断构造函数是否具有可变参数,返回一个布尔值。<code>public void test(String ...args){}</code>,args 就是一个可变参数。</td></tr><tr><td>isAccessible()</td><td>判断构造函数是否可访问,返回一个布尔值。可通过 Constructor 的 setAccessible()设置访问性。</td></tr><tr><td><code>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code></td><td>判断构造函数是否存在指定注解,返回一个 boolean 值。</td></tr></tbody></table><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Constructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Parameter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Arrays</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReflectExample</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InstantiationException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IllegalAccessException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">NoSuchMethodException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Dog</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> cls </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Class中所有构造方法,返回一个Constructor数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Constructor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;[]</span><span style="color:#A6ACCD;"> cts </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredConstructors</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 根据构造方法参数的类型从Class获取Constructor,注意构造方法参数的类型需要是包装类型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Constructor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Dog</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ct </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredConstructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">Integer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取构造方法名称</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ct</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// reflect.Dog</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取构造方法修饰符</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ct</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getModifiers</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取构造方法的参数数量</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ct</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParameterCount</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取构造方法的参数类型,返回一个Class数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;[]</span><span style="color:#A6ACCD;"> parameterTypes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ct</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParameterTypes</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">parameterTypes</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// java.lang.String java.lang.Integer</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取构造方法的参数,返回一个Parameter数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Parameter</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> parameters </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ct</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParameters</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">parameters</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// arg0 arg1</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断构造方法是否存在指定注解</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ct</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isAnnotationPresent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Deprecated</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2-3-method" tabindex="-1">2.3 Method <a class="header-anchor" href="#_2-3-method" aria-label="Permalink to &quot;2.3 Method&quot;">​</a></h3><p>Method 提供关于类或接口上单独某个方法(以及如何访问该方法)的信息,所反映的方法可能是类方法或实例方法(包括抽象方法)。通过 Class 的<code>getDeclaredMethods()</code>或<code>getMethods()</code>获取类中的一组 Method。Method 方法如下:</p><table><thead><tr><th>api 名称</th><th>描述</th></tr></thead><tbody><tr><td>getName()</td><td>以字符串的形式返回方法的名称。</td></tr><tr><td>getReturnType()</td><td>获取方法的返回值,返回一个 Class 对象。</td></tr><tr><td>getModifiers()</td><td>获取方法的修饰符,返回一个 int 值。</td></tr><tr><td>getParameters()</td><td>获取方法参数列表,返回一个 Parameter 数组。</td></tr><tr><td>getParameterCount()</td><td>返回方法参数列表数量。</td></tr><tr><td>getParameterTypes()</td><td>获取方法所有参数类型,返回一个 Class 数组。</td></tr><tr><td>getAnnotations()</td><td>获取方法上的注解,返回一个 Annotation 数组。</td></tr><tr><td><code>getAnnotation(Class&lt;T&gt; annotationClass)</code></td><td>根据 class 获取方法上指定注解,返回一个 Annotation 对象,若方法不存在指定注解则返回 null。</td></tr><tr><td>getExceptionTypes()</td><td>获取方法抛出的异常,返回一个 Class 数组。如果方法未抛出异常则返回一个空数组。</td></tr><tr><td>getDefaultValue()</td><td>此方法用于获取方法上注解的默认值。如果注解是基元类型,则返回相应包装器类型的实例。如果没有与注解关联的默认值,或者如果方法实例不表示注释类型的声明成员,则返回 null。</td></tr><tr><td>getGenericExceptionTypes()</td><td>返回一个类型对象数组(Type[]),该数组表示声方法抛出的异常。如果基础可执行文件在其 throws 子句中未声明任何异常,则返回长度为 0 的数组。/</td></tr><tr><td>getGenericParameterTypes()</td><td>返回一个类型对象数组(Type[]),该数组表示方法的参数类型列表。</td></tr><tr><td>getGenericReturnType()</td><td>获取方法的返回值(通用的),返回一个 Type 对象</td></tr><tr><td>isBridge()</td><td>判断方法是否是桥接方法,返回一个 boolean 值。</td></tr><tr><td>isSynthetic()</td><td>判断方法是否是合成方法,返回一个 boolean 值。</td></tr><tr><td>isDefault()</td><td>判断方法是否是默认方法,返回一个 boolean 值。</td></tr><tr><td>isVarArgs()</td><td>判断方法是否具有可变参数,返回一个 boolean 值。</td></tr><tr><td>isAccessible()</td><td>判断方法是否可访问,返回一个布尔值。可通过 Method 的 setAccessible()设置访问性。</td></tr><tr><td><code>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code></td><td>判断方法上是否存在指定注解,返回一个 boolean 值。</td></tr><tr><td><strong>invoke(Object obj, Object... args)</strong></td><td>此方法用于调用方法,obj 指向方法中的 this,args 为方法的参数。</td></tr></tbody></table><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Annotation</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">InvocationTargetException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Method</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Parameter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Arrays</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReflectExample</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">NoSuchMethodException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InvocationTargetException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IllegalAccessException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InstantiationException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Dog</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> cls </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Class中所有的Method</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Method</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> methods </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredMethods</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">methods</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// getAge setAge getName setName</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 根据方法名和方法参数的类型从Class中获取Method</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Method</span><span style="color:#A6ACCD;"> method </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredMethod</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Method的修饰符</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getModifiers</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Method的返回值类型</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getReturnType</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// void</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Method的参数数量</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParameterCount</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Method的参数列表,返回一个Parameter数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Parameter</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> parameters </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParameters</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">parameters</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// arg0</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Method的参数类型,返回一个Class数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;[]</span><span style="color:#A6ACCD;"> parameterTypes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParameterTypes</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">parameterTypes</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// java.lang.String</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Method上的注解,返回一个Annotation数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Annotation</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> annotations </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAnnotations</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">annotations</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// @java.lang.Deprecated()</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断当前Method是否是默认方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isDefault</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断方法是否可访问,返回一个布尔值。可通过Method的setAccessible()设置访问性</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isAccessible</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断当前方法是否包含指定注解</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isAnnotationPresent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Deprecated</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> dog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 调用方法,第一个参数为方法中的 this(一般是Method所在类的实例),第二个参数为方法的参数</span></span>
<span class="line"><span style="color:#A6ACCD;">        method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">invoke</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dog</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">大黄</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 大黄</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2-4-field" tabindex="-1">2.4 Field <a class="header-anchor" href="#_2-4-field" aria-label="Permalink to &quot;2.4 Field&quot;">​</a></h3><p>Field 提供有关类或接口的单个字段的信息,以及对它的动态访问权限。反射的字段可能是一个类(静态)字段或实例字段。通过 Class 类的<code>getDeclaredFields</code>或<code>getFields()</code>获取类中的一组 Field。Field 方法如下:</p><table><thead><tr><th>api 名称</th><th>描述</th></tr></thead><tbody><tr><td>getName()</td><td>以字符串的形式返回字段的名称。</td></tr><tr><td>getType()</td><td>获取字段的类型,返回一个 Class 对象。</td></tr><tr><td>getModifiers()</td><td>获取字段修饰符,返回一个 int 值。</td></tr><tr><td>getAnnotations()</td><td>获取字段上所有非 private 修饰的注解,返回一个 Annotation 数组。</td></tr><tr><td><code>getAnnotation(Class&lt;T&gt; annotationClass)</code></td><td>根据指定类获取字段上非 private 修饰的注解,若字段存在对应的注解,则返回该注解,否则返回 null。</td></tr><tr><td><code>getAnnotationsByType(Class&lt;T&gt; annotationClass)</code></td><td>根据指定类获取字段上非 private 修饰的所有注解,返回一个注解数组。</td></tr><tr><td>getDeclaringClass()</td><td>获取字段所属类的对象,返回一个 Class 对象。</td></tr><tr><td>get(Object obj)</td><td>根据对象获取对应字段(Field)的值,返回一个 Object。</td></tr><tr><td>getInt(Object obj)</td><td>从 obj 根据字段获取对应字段值并转为 int,注意:字段类型只能为 int,否则抛出 java.lang.IllegalArgumentException(非法数据异常)。除了 getInt(),Field 类还提供了 getByte()、getLong()、getDouble()、getFloat()、getChar()、getShort()、getBoolean(),它们的作用与 getInt()类似,只不过转换的类型不同而已。</td></tr><tr><td>isSynthetic()</td><td>判断字段是否是合成字段,返回一个 boolean 值。</td></tr><tr><td><code>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass</code>)</td><td>判断字段上是否存在指定注解,返回一个 boolean 值。</td></tr><tr><td>isAccessible()</td><td>判断字段是否可访问,返回一个布尔值。可通过 Field 类的 setAccessible()设置访问性。</td></tr><tr><td>isEnumConstant()</td><td>判断字段是否是一个枚举常量,返回一个布尔值。例如:<code>enum ColorEnum{ RED }</code>,RED 字段就是一个枚举常量字段。</td></tr></tbody></table><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reflect</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Field</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Arrays</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReflectExample</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">NoSuchFieldException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InstantiationException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IllegalAccessException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Dog</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> cls </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取Class中所有的Field</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Field</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> fields </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredFields</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fields</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// name age address</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 根据字段名称从Class中获取Field</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Field</span><span style="color:#A6ACCD;"> field </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredField</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取字段名称</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">field</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// name</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取字段修饰符</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">field</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getModifiers</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取字段类型,返回一个Class对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">field</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getType</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// java.lang.String</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取字段所属类字段,返回一个Class对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">field</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaringClass</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// reflect.Dog</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> dog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cls</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        dog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">大黄</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 设置字段访问性</span></span>
<span class="line"><span style="color:#A6ACCD;">        field</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAccessible</span><span style="color:#89DDFF;">(true);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 根据对象获取对应字段(Field)的值,返回一个 Object,访问前需要设置字段的访问性</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">field</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dog</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 大黄</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断字段是否可访问,返回一个布尔值。可通过Field类的setAccessible()设置访问性。</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">field</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isAccessible</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断字段是否是一个枚举常量,返回一个布尔值</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">field</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isEnumConstant</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 判断字段是否包含指定注解</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">field</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isAnnotationPresent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Deprecated</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="_2-5-modifiers" tabindex="-1">2.5 Modifiers <a class="header-anchor" href="#_2-5-modifiers" aria-label="Permalink to &quot;2.5 Modifiers&quot;">​</a></h4><p>Modifiers 用于表示 Java 中的修饰符,Modifiers 类中提供了大量修饰符常量,以 16 进制的数字表示,如果 class、method、field 没有修饰符通过 getModifiers()的值为 0。 Modifiers 类内部还提供了诸多 isXXX 形式的方法,用于根据 int 判断是否某个修饰符,返回一个布尔值,例如:<code>boolean isPublic(int mod)</code>。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000001 表示public修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PUBLIC           </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000001</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000002 表示private修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PRIVATE          </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000002</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000004 表示protected修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PROTECTED        </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000004</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000008 表示static修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> STATIC           </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000008</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000010 表示final修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> FINAL            </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000010</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000020 表示synchronized修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> SYNCHRONIZED     </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000020</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000040 表示volatile修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> VOLATILE         </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000040</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000080 表示transient修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> TRANSIENT        </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000080</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000100 表示native修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> NATIVE           </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000200 表示interface修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> INTERFACE        </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000400 表示abstract修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ABSTRACT         </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000400</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000800 表示strict修饰符</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> STRICT           </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000800</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000040 表示bridge(桥接)修饰符</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> BRIDGE    </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000040</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00000080 表示varargs(可变变量)修饰符</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> VARARGS   </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00000080</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00001000 表示synthetic(合成)修饰符</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> SYNTHETIC </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00001000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00002000 表示annotation(注解)修饰符</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ANNOTATION  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00002000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00004000 表示enum(枚举)修饰符</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ENUM      </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00004000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0x00008000 表示mandated(委托)修饰符</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> MANDATED  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x00008000</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_3-反射机制的执行流程" tabindex="-1">3.反射机制的执行流程 <a class="header-anchor" href="#_3-反射机制的执行流程" aria-label="Permalink to &quot;3.反射机制的执行流程&quot;">​</a></h2><h2 id="_4-反射的替代方案" tabindex="-1">4.反射的替代方案 <a class="header-anchor" href="#_4-反射的替代方案" aria-label="Permalink to &quot;4.反射的替代方案&quot;">​</a></h2><p>Java 反射机制在某些情况下确实会影响性能,因为反射操作需要进行较多的检查和处理,会导致程序运行速度变慢。常见的替代方案包括:</p><ul><li><p>使用字节码操作库,如 ASM、Javassist 等。这些库可以直接操作 Java 字节码,避免了反射的开销,同时也能够实现类似的功能。</p></li><li><p>使用代码生成工具,如 JavaPoet、CGlib 等。这些工具可以根据给定的模板生成 Java 代码,从而在运行时避免反射操作。</p></li><li><p>使用注解处理器,如 Google 的 AutoValue、AutoFactory 等。这些注解处理器可以在编译时生成代码,从而避免了运行时的反射操作。</p></li><li><p>使用反射缓存,将反射操作的结果缓存起来,避免重复的反射操作。这种方式可以在一定程度上提高性能,但需要注意缓存的合理性和更新机制。</p></li></ul>`,34),t=[p];function e(c,r,y,D,F,A){return a(),n("div",null,t)}const d=s(o,[["render",e]]);export{i as __pageData,d as default};
