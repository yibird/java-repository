import{_ as s,o as a,c as t,O as l}from"./chunks/framework.1e38657f.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"db/mysql/type.md","filePath":"db/mysql/type.md","lastUpdated":1708793976000}'),n={name:"db/mysql/type.md"},o=l(`<p>mysql 提供了丰富的数据类型,大致可以分为数值类型、字符类型、日期时间类型、JSON 类型、数据空间类型,设计表时选择&quot;合适的&quot;数据类型可以有效的节省存储空间、提升查询效率。</p><h2 id="_1-数值类型" tabindex="-1">1.数值类型 <a class="header-anchor" href="#_1-数值类型" aria-label="Permalink to &quot;1.数值类型&quot;">​</a></h2><p>在 Mysql 中数值类型又可以细分为整数类型、浮点数类型、定点数类型、位类型类型四种。</p><h3 id="_1-1-整数类型" tabindex="-1">1.1 整数类型 <a class="header-anchor" href="#_1-1-整数类型" aria-label="Permalink to &quot;1.1 整数类型&quot;">​</a></h3><table><thead><tr><th>类型</th><th>占用大小(byte)</th><th>描述</th><th>应用场景</th></tr></thead><tbody><tr><td>tinyint unsigned</td><td>1</td><td>存储 0~255 的无符号整数</td><td>存储枚举值、状态值、人的年龄</td></tr><tr><td>smallint unsigned</td><td>2</td><td>存储 0~65535 的无符号整数</td><td>存储乌龟的年龄</td></tr><tr><td>mediumint unsigned</td><td>3</td><td>存储 0~16777215 的无符号整数</td><td>存储中型范围的整数</td></tr><tr><td>int unsigned</td><td>4</td><td>存储 0~约 43 亿的无符号整数</td><td>存储数据量不是特别巨大的数值列,例如恐龙化石的年份、IP 地址</td></tr><tr><td>bigint unsigned</td><td>8</td><td>存储 0~10 的 19 次方的无符号整数</td><td>存储大数量场景下的整数,例如日志 id、大额度金额</td></tr></tbody></table><ul><li>存储非负数值时,必须用 unsigned 修饰。</li><li>tinyint 类型一般存储小数值或枚举值,例如存储 0 为男,1 为女,tinyint 相较于比 Enum 类型所占空间更少,因此查询效率更高。</li><li>使用 int 类型存储 IPv4 地址。如果忽略可读性推荐使用 int 类型存储 IPv4 的地址,IPv4 本质上是一个无符号 32 位的数值,IPv4 的可选范围是 0.0.0.0 ～ 255.255.255.255,用逗号隔开每个数的取值范围为 0-256,也就是 256 个数,256 是 2 的 8 次方,用二进制表示 8 位,IPv4 由 4 个数字组成,所以存储 IPv4 地址最多是 32 位,按照字节二进制转换,1Byte 等于 8 位二进制,因此存储 IPv4 地址最多需要 4 字节(Byte)。相较于 varchar 类型使用 int 存储 IPv4 地址所占用的空间更少,而且范围查询效率也更高(因为存储的是数值)。使用 int 存储 IP 地址虽然可读性差,但是 Mysql 提供了 INET_ATON、INET_NTOA 两个函数用于 IP 地址与无符号数值的转换。</li></ul><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#A6ACCD;"> test;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">table</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ip</span><span style="color:#A6ACCD;">(ip </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> unsigned </span><span style="color:#F78C6C;">not null</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#A6ACCD;"># INET_ATON</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">函数用于将字符串ip地址转换为32位无符号整数</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#A6ACCD;"># INET_NTOA</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">函数用于将32位无符号整数的IP地址转为字符串</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">insert into</span><span style="color:#A6ACCD;"> ip </span><span style="color:#F78C6C;">values</span><span style="color:#A6ACCD;">(INET_ATON(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">192.168.110.100</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">));</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> ip; # 查询结果为:</span><span style="color:#F78C6C;">3232263780</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> INET_NTOA(ip) </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> ip; </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> 查询结果为:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">192.168.110.100</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><ul><li>推荐使用 bigint 做为大数据量数值列的存储类型,例如主键 id,随着时间和业务量的增加,数据不断积累膨胀,数据量可能超过亿级甚至更大规模,此时使用 int 类型远远满足不了业务需求。对于数据量或未来可能产生大量数据场景下,推荐使用 bigint 存储数据。bigint 另一个使用场景是存储大额度金额,由于 Mysql 的 decimal 类型存储精度丢失问题,使用 bigint 存储金额可以避免精度丢失。</li></ul><h3 id="_1-2-浮点数类型" tabindex="-1">1.2 浮点数类型 <a class="header-anchor" href="#_1-2-浮点数类型" aria-label="Permalink to &quot;1.2 浮点数类型&quot;">​</a></h3><p>在 Mysql 浮点数分为 FLOAT、DOUBLE 类型表示近似数值数据值,FLOAT 是一种单精度浮点数类型,它占用 4 个字节(32 位),可用于存储大约 7 位有效数字。 DOUBLE 是一种双精度浮点数类型,占用 8 字节,最多存储大约 15 位有效数字。在 SQL 标准语法下浮点数语法为<code>类型(p)</code>,其中 p 表示精度值,仅用于确定存储大小,例如 FLOAT(4)表示存储一个单精度浮点数,其中精度参数为 4,DOUBLE(8)表示存储一个双精度浮点数,其中精度参数为 8。MySQL 除了使用 SQL 标准语法外,也支持非标准语法(从 MySQL8.0.17 开始,不推荐使用非标准语法),非标准语法浮点数语法为<code>类型(M,D)</code>,其中 M 表示浮点数的总位数(范围值为 1 到 24),D 表示浮点数小数点后的位数(范围值为 0 到 23,且不能大于总位数 M),例如 FLOAT(8,2) 表示总共有 8 位数字,其中 2 位是小数点后的位数,即小数点前有 6 位。由于浮点数用于表示近似数值数据值,浮点数存储和计算时可能会出现精度丢失,因此,对于有精度要求的场景下推荐使用定点数类型。</p><h3 id="_1-3-定点数类型" tabindex="-1">1.3 定点数类型 <a class="header-anchor" href="#_1-3-定点数类型" aria-label="Permalink to &quot;1.3 定点数类型&quot;">​</a></h3><p>在 MySQL 中,DECIMAL 是一种用于存储精确小数的数据类型,适用于需要精确小数表示的场景,例如存储金额、百分比计算等场景。它用于表示固定点数,即指定了小数点前后的位数。相较于 FLOAT 和 DOUBLE 浮点数类型不同,后者是近似数值类型,可能存在精度损失。DECIMAL 类型的语法为<code>DECIMAL(M, D)</code>,其中 M 是总位数,D 是小数点后的位数,例如 DECIMAL(10,2)表示表示总共有 10 位数字,其中有 2 位是小数点后的位数。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">drop</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">exists</span><span style="color:#A6ACCD;"> t1;</span></span>
<span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">t1</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">f1 </span><span style="color:#C792EA;">DECIMAL</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#F78C6C;">INSERT INTO</span><span style="color:#A6ACCD;"> t1(f1) </span><span style="color:#F78C6C;">VALUES</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1111</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">111</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> f1 </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> t1; # f1的结果值为 </span><span style="color:#F78C6C;">1111</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">,超过小数点的位数会被丢失</span></span></code></pre></div><h3 id="_1-4-位类型类型" tabindex="-1">1.4 位类型类型 <a class="header-anchor" href="#_1-4-位类型类型" aria-label="Permalink to &quot;1.4 位类型类型&quot;">​</a></h3><p>在 MySQL 中,BIT(M) 是用于存储位字段(bit field)的数据类型。BIT(M)表示存储一个二进制字符串,其中 M 表示位的数量,范围是从 1 到 64,如果为长度小于 M 位的列赋值,则该值将在左侧填充零。BIT 类型常用于存储标志或布尔值,可以有效地压缩存储。Mysql 提供了多个 BIT 相关函数,用于处理和操作二进制数据,常见函数如下:</p><ul><li>BIT_COUNT:用于计算一个二进制字符串或数字中设置为 1 的位数。</li><li>BIT_AND:用于计算两个二进制字符串或数字的按位与操作。</li><li>BIT_OR:用于计算两个二进制字符串或数字的按位或操作。</li><li>BIT_XOR:用于计算两个二进制字符串或数字的按位异或操作。</li><li>BIT_NOT:用于计算一个二进制字符串或数字的按位非操作。</li></ul><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">t1</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">    bit_field1 </span><span style="color:#C792EA;">BIT</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#F78C6C;">INSERT INTO</span><span style="color:#A6ACCD;"> t1(bit_field1) </span><span style="color:#F78C6C;">VALUES</span><span style="color:#A6ACCD;"> (B</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">10101010</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"># 使用BIN函数查询bit_field字段转换为字符串显示</span></span>
<span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> BIN(bit_field) </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> t1;</span></span></code></pre></div><h2 id="_2-字符类型" tabindex="-1">2.字符类型 <a class="header-anchor" href="#_2-字符类型" aria-label="Permalink to &quot;2.字符类型&quot;">​</a></h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>CHAR 用于存储定长的字符值,如果存储字符长度小于 CHAR 指定长度则会使用空格填充。</td></tr><tr><td>VARCHAR</td><td>VARCHAR 用于存储变长字符值。VARCHAR 存储值时最终存储数据为长度前缀+数据,长度前缀表示值中的字节数,存储字符值如果不超过 255 个字节,则为长度前缀 1 个字节,如果超过 255 个字节,则长度前缀为 2 个字节。</td></tr><tr><td>BINARY 和 VARBINARY</td><td>BINARY BINARY、VARBINARY 类似于 CHAR、BINARY,但 BINARY、VARBINARY 用于存储二进制数据。BINARY 和 VARBINARY 的允许最大长度与 CHAR 和 VARCHAR 相同,但 BINARY 和 VARBINARY 的长度以字节而不是字符为单位。</td></tr><tr><td>BLOB</td><td>BLOB 用于存储二进制大对象(BLOB 值被视为二进制字符串,即字节字符串),可以容纳可变数量的数据,BLOB 可以细分 TINYBLOB、BLOB、 MEDIUMBLOB 和 LONGBLOB 四种类型。TINYBLOB 占用字节:L+ 1 个字节,其中 L&lt;2 的 8 次方。BLOB 占用字节:L+ 2 个字节,其中 L&lt; 2 的 16 次方。MEDIUMBLOB 占用字节:L+ 3 个字节,其中 L&lt; 2 的 24 次方。LONGBLOB 占用字节:L+ 4 个字节,其中 L&lt; 2 的 32 次方。</td></tr><tr><td>TEXT</td><td>TEXT 用于存储大字符串(TEXT 值被视为非二进制字符串,即字符串),TEXT 类可细分 TINYTEXT、TEXT、 MEDIUMTEXT 和 LONGTEXT 四种类型。 TINYTEXT 占用字节:L+ 1 个字节,其中 L&lt;2 的 8 次方。TEXT 占用字节:L+ 2 个字节,其中 L&lt; 2 的 16 次方。MEDIUMTEXT 占用字节:L+ 3 个字节,其中 L&lt; 2 的 24 次方。LONGTEXT 占用字节:L+ 4 个字节,其中 L&lt; 2 的 32 次方。</td></tr></tbody></table><h3 id="_2-1-char-varchar" tabindex="-1">2.1 CHAR &amp; VARCHAR <a class="header-anchor" href="#_2-1-char-varchar" aria-label="Permalink to &quot;2.1 CHAR &amp; VARCHAR&quot;">​</a></h3><h3 id="_2-2-binary-varbinary" tabindex="-1">2.2 BINARY &amp; VARBINARY <a class="header-anchor" href="#_2-2-binary-varbinary" aria-label="Permalink to &quot;2.2 BINARY &amp; VARBINARY&quot;">​</a></h3><h3 id="_2-3-blob-text" tabindex="-1">2.3 BLOB &amp; TEXT <a class="header-anchor" href="#_2-3-blob-text" aria-label="Permalink to &quot;2.3 BLOB &amp; TEXT&quot;">​</a></h3><h3 id="_2-4-enum" tabindex="-1">2.4 ENUM <a class="header-anchor" href="#_2-4-enum" aria-label="Permalink to &quot;2.4 ENUM&quot;">​</a></h3><p>ENUM(枚举)是 MySQL 中用于存储一个有限集合值的数据类型,适用于具有静态、固定和相对简单选项集合的场景。它允许定义一组可能的值,然后在表中使用该类型的列来存储其中的一个值,ENUM 类型将每个可能的值映射到整数,然后在数据库中存储该整数,因此,相较于 SET 类型更紧凑,而且 ENUM 类型的值是有序的,但在存储和检索时并不关心其顺序,插入时的顺序可能不会影响查询时的顺序。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">t1</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">   f1 ENUM(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Option1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Option2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Option3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#F78C6C;">INSERT INTO</span><span style="color:#A6ACCD;"> t1(f1) </span><span style="color:#F78C6C;">VALUES</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Option2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> t1;</span></span></code></pre></div><h3 id="_2-5-set" tabindex="-1">2.5 SET <a class="header-anchor" href="#_2-5-set" aria-label="Permalink to &quot;2.5 SET&quot;">​</a></h3><p>SET 类型在 MySQL 中用于存储一个或多个由逗号分隔的字符串值,SET 类型适用于具有有限且相对静态的选项的场景,例如一些配置项或状态标志。</p><h2 id="_3-日期时间类型" tabindex="-1">3.日期时间类型 <a class="header-anchor" href="#_3-日期时间类型" aria-label="Permalink to &quot;3.日期时间类型&quot;">​</a></h2><p>Mysql 提供了多种时间类型,用于存储不同精度和格式的日期和时间信息:</p><table><thead><tr><th>类型</th><th>描述</th><th>占用大小(byte)</th><th>取值范围</th><th>默认值</th></tr></thead><tbody><tr><td>DATE</td><td>用于存储日期,格式为 &#39;YYYY-MM-DD&#39;</td><td>3</td><td>1000-01-01 到 9999-12-31</td><td>0000-00-00</td></tr><tr><td>DATETIME</td><td>用于存储日期和时间,格式为 &#39;YYYY-MM-DD HH:MM:SS&#39;,例如&#39;2022-01-11 14:30:00&#39; 表示 2022 年 1 月 11 日下午 2 点 30 分</td><td>8</td><td>1000-01-01 00:00:00 到 9999-12-31 23:59:59</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>用于存储日期和时间的时间戳,支持时区</td><td>4</td><td>1970-01-01 00:00:01 到 2038-01-19 03:14:07</td><td></td></tr><tr><td>TIME</td><td>用于存储时间,格式为 &#39;HH:MM:SS&#39;,例如&#39;14:30:00&#39; 表示下午 2 点 30 分</td><td>占用 3 到 6 个字节的存储空间,精确度取决于秒或微秒的存储</td><td>-838:59:59 到 838:59:59</td><td>00:00:00</td></tr><tr><td>YEAR</td><td>用于存储年份,格式为 &#39;YYYY&#39;,例如&#39;2022&#39;表示年份 2022</td><td>1</td><td>1901 到 2155</td><td>0000</td></tr></tbody></table><ul><li>对处理时区或存储对存储空间敏感的场景下推荐使用 TIMESTAMP,相较于 DATETIME 而言,TIMESTAMP 支持时区,可以根据服务器时区自动调整存储的时间值,而且 TIMESTAMP 所占用的存储空间更小。</li><li>对时区无需求或存储空间不敏感的场景下推荐使用 DATETIME,虽然 DATETIME 占用空间比 TIMESTAMP 大,但是可读性更好,而且与时区无关的,它存储的日期和时间信息不受服务器时区设置的影响,这意味着在不同时区的服务器上,相同的 DATETIME 值表示相同的实际时间。由于 TIMESTAMP 存储值范围限制,可能会造成时间戳溢出,无法存储更广泛的时间范围。</li><li>创建表时推荐使用默认值来为日期列提供合理的初始值,以避免插入时的错误。</li><li>避免在日期列中使用零日期(如 &#39;0000-00-00&#39;)这可能会导致混淆和不一致性。使用默认值或 NULL 来表示未知或不适用的日期。</li></ul><h2 id="_4-json-数据类型" tabindex="-1">4.JSON 数据类型 <a class="header-anchor" href="#_4-json-数据类型" aria-label="Permalink to &quot;4.JSON 数据类型&quot;">​</a></h2><p>MySQL 5.7 版本引入了对 JSON 数据类型的支持,并在 MySQL 8.0 版本进行了改进。JSON 类型允许在 MySQL 中存储和操作 JSON 格式的数据,JSON 类型的引入使得 MySQL 更加灵活地处理和查询 JSON 数据,尤其在与 NoSQL 数据库或需要存储和检索复杂的 JSON 结构的应用程序中,提供了更丰富的功能。</p><h2 id="_5-空间数据类型" tabindex="-1">5.空间数据类型 <a class="header-anchor" href="#_5-空间数据类型" aria-label="Permalink to &quot;5.空间数据类型&quot;">​</a></h2>`,34),p=[o];function e(r,C,c,A,d,i){return a(),t("div",null,p)}const h=s(n,[["render",e]]);export{D as __pageData,h as default};
