import{_ as s,o as a,c as n,O as l}from"./chunks/framework.1e38657f.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"springFramework/spring/transaction.md","filePath":"springFramework/spring/transaction.md","lastUpdated":1708792908000}'),p={name:"springFramework/spring/transaction.md"},o=l(`<h2 id="_1-spring-事务介绍" tabindex="-1">1.Spring 事务介绍 <a class="header-anchor" href="#_1-spring-事务介绍" aria-label="Permalink to &quot;1.Spring 事务介绍&quot;">​</a></h2><p>Spring 事务管理是 Spring 框架中的重要特性之一,它提供了声明式事务和编程式事务两种方式进行事务的管理。Spring 事务本质上是对事务功能的抽象,其底层依赖于数据源的事务支持,如果数据源不支持事务(大部分关系型数据库都支持事务,例如 Mysql、PgSQL、Oracle),即使启用了事务也不会生效。</p><p>在 Spring 框架中,spring-tx 模块是用于提供声明式事务管理的模块。它包含了 Spring 框架的事务相关的核心功能,包括声明式事务的实现和事务管理的基本接口和类。大多数 ORM 集成 SpringBoot starter 内置了 spring-tx,例如<code>mybatis-plus-boot-starter</code>、<code>spring-boot-starter-data-jpa</code>、<code>spring-boot-starter-jdbc</code>,因此无需手动添加 spring-tx 依赖,否则需要手动添加 spring-tx。</p><div class="language-groovy"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">implementation </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">org.springframework:spring-tx:6.0.11</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h3 id="_1-1-spring-事务相关类介绍" tabindex="-1">1.1 Spring 事务相关类介绍 <a class="header-anchor" href="#_1-1-spring-事务相关类介绍" aria-label="Permalink to &quot;1.1 Spring 事务相关类介绍&quot;">​</a></h3><ul><li>PlatformTransactionManager:Spring 事务的核心接口,定义了事务管理器的基本操作。</li><li>DataSourceTransactionManager:实现了 PlatformTransactionManager 接口,用于管理基于 JDBC 的事务。例如 mybatis-spring 源码中实现了 DataSourceTransactionManager 接口,实现事务控制和管理。</li><li>HibernateTransactionManager:实现了 PlatformTransactionManager 接口,用于管理基于 Hibernate 的事务。</li><li>JpaTransactionManager:实现了 PlatformTransactionManager 接口,用于管理基于 JPA 的事务。</li><li>TransactionDefinition:接口，定义了事务的属性,如隔离级别、传播行为、超时时间等。</li><li>TransactionStatus:接口,表示当前事务的状态,如已提交、已回滚、已暂挂等。</li><li>TransactionAspectSupport:Spring AOP 切面,用于处理事务相关的逻辑。</li><li>TransactionInterceptor:Spring AOP 拦截器,用于拦截带有 @Transactional 注解的方法,启动和管理事务。</li></ul><h3 id="_1-2-spring-声明式事务" tabindex="-1">1.2 Spring 声明式事务 <a class="header-anchor" href="#_1-2-spring-声明式事务" aria-label="Permalink to &quot;1.2 Spring 声明式事务&quot;">​</a></h3><p>Spring 声明式事务采用注解或 XML 配置方式,通过在方法上或类上添加事务注解来声明事务,将事务的控制交给 Spring 容器来管理,开发人员无需关心事务管理的具体实现。声明式事务适用于大部分的事务场景,可以提高代码的可维护性和可读性。Spring 声明式事务的粒度是方法级,当遇到一些特殊情况下(例如对性能敏感),推荐使用编程式事务。</p><h3 id="_1-3-spring-编程式事务" tabindex="-1">1.3 Spring 编程式事务 <a class="header-anchor" href="#_1-3-spring-编程式事务" aria-label="Permalink to &quot;1.3 Spring 编程式事务&quot;">​</a></h3><p>Spring 编程式事务需要在代码中通过编程的方式来管理事务,需要显式的调用事务管理器的接口,手动开启、提交或回滚事务。编程式事务的优点是可以更加灵活地控制事务,可以在事务的开始和结束处添加特定的逻辑处理,但是代码冗长、可维护性差,不适用于复杂的事务场景。Spring 编程式提供事务管理器和 TransactionTemplate(事务模板类)两种方式操作事务。</p><h4 id="_1-3-基于事务管理器操作事务" tabindex="-1">1.3 基于事务管理器操作事务 <a class="header-anchor" href="#_1-3-基于事务管理器操作事务" aria-label="Permalink to &quot;1.3 基于事务管理器操作事务&quot;">​</a></h4><ul><li>定义数据源:</li></ul><div class="language-properties"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># mysql数据源配置</span></span>
<span class="line"><span style="color:#F07178;">spring.datasource.url</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">jdbc:mysql://localhost:3306/test?</span><span style="color:#F07178;">useUnicode</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">true&amp;</span><span style="color:#F07178;">characterEncoding</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">utf-8&amp;</span><span style="color:#F07178;">useSSL</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">false&amp;</span><span style="color:#F07178;">serverTimezone</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">Asia/Shanghai</span></span>
<span class="line"><span style="color:#F07178;">spring.datasource.driverClassName</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span style="color:#F07178;">spring.datasource.username</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">root</span></span>
<span class="line"><span style="color:#F07178;">spring.datasource.password</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">123456</span></span></code></pre></div><ul><li>配置事务管理器:</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Configuration</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jdbc</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">datasource</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">DataSourceTransactionManager</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">PlatformTransactionManager</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">EnableTransactionManagement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">javax</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">sql</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">DataSource</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">EnableTransactionManagement</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 启用事务管理器</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TransactionManagementConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${spring.datasource.url}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${spring.datasource.driverClassName}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> driverClassName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${spring.datasource.username}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> username</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${spring.datasource.password}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> password</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 配置数据源</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DataSource</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dataSource</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建驱动程序管理器数据源</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">DriverManagerDataSource</span><span style="color:#A6ACCD;"> dataSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DriverManagerDataSource</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        dataSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDriverClassName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">driverClassName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        dataSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setUrl</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        dataSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setUsername</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        dataSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPassword</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">password</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> dataSource</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 向IOC容器注入PlatformTransactionManager实例</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">PlatformTransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transactionManager</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">DataSource</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">dataSource</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建一个JDBC事务管理器</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DataSourceTransactionManager</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dataSource</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>使用事务管理器,实现事务的提交、回滚操作。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Autowired</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">PlatformTransactionManager</span><span style="color:#A6ACCD;"> transactionManager</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">operateWithTransaction</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 根据默认事务管理器获取TransactionDefinition对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">TransactionDefinition</span><span style="color:#A6ACCD;"> transactionDefinition </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultTransactionDefinition</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取事务状态对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> transactionStatus </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> transactionManager</span></span>
<span class="line"><span style="color:#A6ACCD;">        	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTransaction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">transactionDefinition</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 在此进行数据库操作或其他需要事务的操作</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 如果操作失败,将会回滚</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 如果操作成功,将会提交</span></span>
<span class="line"><span style="color:#A6ACCD;">            transactionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">commit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">transactionStatus</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            transactionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rollback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">transactionStatus</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="_1-4-2-基于-transactiontemplate-操作事务" tabindex="-1">1.4.2 基于 TransactionTemplate 操作事务 <a class="header-anchor" href="#_1-4-2-基于-transactiontemplate-操作事务" aria-label="Permalink to &quot;1.4.2 基于 TransactionTemplate 操作事务&quot;">​</a></h4><p>TransactionTemplate 是 Spring 框架提供的一个用于编程式管理事务的工具类,它支持以编程式的方式手动控制事务的提交和回滚。TransactionTemplate 提供方法签名如下:</p><ul><li><code>execute(TransactionCallback&lt;T&gt; action)</code>:在事务中执行给定 TransactionCallback 指定的操作,一般用于有返回值的事务操作。</li><li><code>executeWithoutResult(Consumer&lt;TransactionStatus&gt; action)</code>:在事务中执行给定 Runnable 指定的操作,一般用于无返回值的事务操作。</li><li>setTransactionManager(@Nullable PlatformTransactionManager transactionManager):设置事务管理器。</li><li>setPropagationBehavior(int propagationBehavior):设置事务传播行为。必须是 TransactionDefinition 接口中的传播常数之一。默认值为 PROPAGATION_REQUIRED。</li><li>setPropagationBehaviorName(String constantName):通过 TransactionDefinition 中相应常量的名称设置传播行为,例如&quot;propagation_REQUIRED&quot;。</li><li>setIsolationLevel(int isolationLevel):设置事务隔离级别。必须是 TransactionDefinition 接口中的隔离常数之一。默认值为 ISOLATION_Default。</li><li>setIsolationLevelName(String constantName):根据 TransactionDefinition 中相应常量的名称设置隔离级别,例如&quot;isolation_DEFAULT&quot;。</li><li>setName(String name):设置事务的名称,默认值为 null。</li><li>setTimeout(int timeout):设置事务的超时时间(单位秒),默认值为 TIMEOUT_Default(-1,即事务永不超时)。</li><li>setReadOnly(boolean readOnly):设置是否优化为只读事务,默认值为&quot;false&quot;。</li><li>getTransactionManager():获取事务管理器,返回一个 PlatformTransactionManager 实例。</li><li>afterPropertiesSet():</li><li>getIsolationLevel():返回 int 类型,以表示事务隔离级别。</li><li>getName():返回事务名称。</li><li>getPropagationBehavior():返回 int 类型,以表示事务传播行为。</li><li>getTimeout():返回 int 类型,表示事务的超时时间。</li></ul><p>TransactionStatus 接口表示一个事务的状态,它包含当前事务的一些基本信息。TransactionStatus 提供的方法如下:</p><ul><li>isNewTransaction():是否是新的事务,而不是已有事务的一部分。</li><li>Object createSavepoint():创建一个新的保存点。可以通过 rollbackToSavepoint 回滚到特定的保存点,并通过 releaseSavepoint 显式释放不再需要的保存点。</li><li>setRollbackOnly():仅设置事务回滚。这指示事务管理器,事务的唯一可能结果可能是回滚,而不是引发异常,从而触发回滚。</li><li>flush():将底层会话刷新到数据存储(如果适用),例如所有受影响的 Hibernate/JPA 会话。</li><li>boolean hasSavepoint():返回此事务内部是否携带保存点，即是否已创建为基于保存点的嵌套事务。</li><li>boolean isCompleted():返回此事务是否已完成,即是否已提交或回滚。</li><li>boolean isNewTransaction():返回当前事务是否为新事务,以其他方式参与现有事务,或者可能一开始就不在实际事务中运行。</li><li>boolean isRollbackOnly():返回事务是否已标记为仅回滚(由应用程序或事务基础结构)。</li><li>releaseSavepoint(Object savepoint):显式释放给定的保存点。请注意,大多数事务管理器都会在事务完成时自动释放保存点。</li><li>rollbackToSavepoint(Object savepoint):回滚到给定的保存点。保存点之后不会自动释放,可以显式调用 releaseSavepoint(Object),也可以依赖于事务完成时的自动释放。</li></ul><p>TransactionTemplate 使用步骤如下:</p><ul><li>配置 TransactionTemplate。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Configuration</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">PlatformTransactionManager</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">support</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jdbc</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">datasource</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">DataSourceTransactionManager</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">PlatformTransactionManager</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TransactionConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${spring.datasource.url}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${spring.datasource.driverClassName}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> driverClassName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${spring.datasource.username}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> username</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${spring.datasource.password}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> password</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 配置数据源</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DataSource</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dataSource</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建驱动程序管理器数据源</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">DriverManagerDataSource</span><span style="color:#A6ACCD;"> dataSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DriverManagerDataSource</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        dataSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDriverClassName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">driverClassName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        dataSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setUrl</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        dataSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setUsername</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        dataSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPassword</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">password</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> dataSource</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 向IOC容器注入PlatformTransactionManager实例</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">PlatformTransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transactionManager</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">DataSource</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">dataSource</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建一个JDBC事务管理器</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DataSourceTransactionManager</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dataSource</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 向IOC容器注入TransactionTemplate实例,通过事务管理器创建一个</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * TransactionTemplate实例</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionTemplate</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transactionTemplate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">PlatformTransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">transactionManager</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TransactionTemplate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">transactionManager</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>使用 TransactionTemplate 操作事务。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">fly</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">security</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">service</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">AllArgsConstructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">stereotype</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Service</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">support</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionCallback</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">support</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Consumer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Service</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * TransactionTemplate提供方法如下:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * - execute</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionTemplate</span><span style="color:#A6ACCD;"> template</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">operateWithTransaction</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 执行事务且事务操作有返回值</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> execute </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">             * 开始执行事务。如果execute正常执行则TransactionTemplate会自动提交事务,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">             * 如果execute执行过程出现RuntimeException或手动调用TransactionStatus</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">             * 的setRollbackOnly()则会回滚事务</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">             */</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doInTransaction</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">status</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 业务逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 回滚事务</span></span>
<span class="line"><span style="color:#A6ACCD;">                    status</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRollbackOnly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                    e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 执行事务且事务操作无返回值,该方法内部调用了execute方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">executeWithoutResult</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Consumer</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 执行事务</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">accept</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">transactionStatus</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="_1-4-3-transactionaloperator-操作事务" tabindex="-1">1.4.3 TransactionalOperator 操作事务 <a class="header-anchor" href="#_1-4-3-transactionaloperator-操作事务" aria-label="Permalink to &quot;1.4.3 TransactionalOperator 操作事务&quot;">​</a></h4><p>TransactionalOperator 是 Spring Framework 6 中新增的功能,它提供声明式事务管理的编程式替代方案,适用于反应式编程。使用 TransactionalOperator 需要 spring 响应式和 r2dbc 模块支持:</p><ul><li>spring-boot-starter-webflux:Spring Boot 提供的用于构建响应式 Web 应用的启动器,其内部包含了响应式相关组件依赖,如 Reactor Core、Reactor Netty 等。</li><li>spring-boot-starter-data-r2dbc:r2dbc 与 SpringBoot 的 starter。R2DBC(Reactive Relational Database Connectivity) 是一种响应式数据库连接规范和库,它为关系型数据库提供了非阻塞和基于 Reactor 的访问方式。R2DBC 通过响应式和非阻塞 IO,可以实现高效的数据库交互,是关系数据库接入的下一代解决方案。</li></ul><p>TransactionalOperator 使用方式如下:</p><ul><li>创建事务配置类,注入 TransactionalOperator 实例。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">fly</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">config</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">io</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">r2dbc</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">spi</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ConnectionFactories</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">io</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">r2dbc</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">spi</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ConnectionFactory</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Configuration</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">r2dbc</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">connection</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">R2dbcTransactionManager</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ReactiveTransactionManager</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reactive</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionalOperator</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">javax</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">sql</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">DataSource</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @Description:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @Author: zchengfeng</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @Date: 2023/8/4 03:55</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TransactionConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 向IOC注入响应式事务管理器</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ReactiveTransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transactionManager</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">DataSource</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">dataSource</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ConnectionFactory</span><span style="color:#A6ACCD;"> factory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ConnectionFactories</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">r2dbc:postgresql://localhost/test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">R2dbcTransactionManager</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">factory</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 向IOC容器注入TransactionalOperator实例</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionalOperator</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transactionalOperator</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ReactiveTransactionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">manager</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> TransactionalOperator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">manager</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>使用 TransactionalOperator 实现事务操作。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">fly</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">service</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">AllArgsConstructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reactivestreams</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Publisher</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">stereotype</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Service</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ReactiveTransaction</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reactive</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionCallback</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reactive</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionalOperator</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">reactor</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">core</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">publisher</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Flux</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">reactor</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">core</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">publisher</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Mono</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Arrays</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Service</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionalOperator</span><span style="color:#A6ACCD;"> operator</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * 以事务方式执行Mono操作,Mono也可以是异步的,TransactionalOperator</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * 会订阅它的完成事件来决定事务提交。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Mono</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> operator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transactional</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Mono</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromSupplier</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * flux中所有的代码都会在同一事务中执行,flux也可以是异步的,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * TransactionalOperator会追踪它的终止事件。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Flux</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> flux </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Flux</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromStream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">step 1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">step 2</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}));</span></span>
<span class="line"><span style="color:#A6ACCD;">        operator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transactional</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">flux</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 执行事务</span></span>
<span class="line"><span style="color:#A6ACCD;">        operator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 开始执行事务</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Publisher</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doInTransaction</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ReactiveTransaction</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">status</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 执行业务逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 回滚事务</span></span>
<span class="line"><span style="color:#A6ACCD;">                    status</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRollbackOnly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                    e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_1-4-事务事件监听" tabindex="-1">1.4 事务事件监听 <a class="header-anchor" href="#_1-4-事务事件监听" aria-label="Permalink to &quot;1.4 事务事件监听&quot;">​</a></h3><p>在 Spring 中,提供@TransactionalEventListener 注解监听事务的不同阶段的事件信息,注意:@TransactionalEventListener 注解只对声明式事务起作用，对编程式事务无效。仅适用于由 PlatformTransactionManager 管理的线程绑定事务。</p><p>@TransactionalEventListener 注解签名:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Target</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;">ElementType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">METHOD</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ElementType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ANNOTATION_TYPE</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Retention</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">RetentionPolicy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RUNTIME</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Documented</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">EventListener</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionalEventListener</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * 将事件处理绑定到的阶段。默认为TransactionPhase.AFTER_COMMIT,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 如果没有正在进行的事务,则根本不会处理该事件,除非显式启用了fallbackExecution</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">TransactionPhase</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">phase</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> TransactionPhase</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AFTER_COMMIT</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * 如果没有事务正在运行,是否应处理事件。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fallbackExecution</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AliasFor</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">annotation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> EventListener</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">attribute</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">classes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#89DDFF;">&gt;[]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AliasFor</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">annotation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> EventListener</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">attribute</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">classes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#89DDFF;">&gt;[]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">classes</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * 用于使事件处理具有条件的Spring Expression Language（SpEL）属性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AliasFor</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">annotation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> EventListener</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">attribute</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">condition</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">condition</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * 事务侦听器的可选标识符,默认为完全限定的声明方法的签名,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 例如mypackage.MyClass.myMethod()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AliasFor</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">annotation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> EventListener</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">attribute</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>TransactionPhase 是一个事务阶段枚举,签名如下:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TransactionPhase</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  BEFORE_COMMIT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 事务提交前触发</span></span>
<span class="line"><span style="color:#A6ACCD;">  AFTER_COMMIT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 事务提交后触发</span></span>
<span class="line"><span style="color:#A6ACCD;">  AFTER_ROLLBACK</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 事务回滚触发</span></span>
<span class="line"><span style="color:#A6ACCD;">  AFTER_COMPLETION </span><span style="color:#676E95;font-style:italic;">// 事务完成后 触发</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>创建事务组件类,提供四个方法用于监听事务不同阶段。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">fly</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">service</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">stereotype</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Component</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">event</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionPhase</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">event</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionalEventListener</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TxListenerComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">TransactionalEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">phase</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> TransactionPhase</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AFTER_COMMIT</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleUsersAfterCommit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">text</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">AfterCommit收到事件通知:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">TransactionalEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">phase</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> TransactionPhase</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AFTER_COMPLETION</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleUsersAfterCompletion</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">text</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">AfterCompletion收到事件通知:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">TransactionalEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">phase</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> TransactionPhase</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AFTER_ROLLBACK</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleUsersAfterRollback</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">text</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">AfterRollback收到事件通知:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">TransactionalEventListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">phase</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> TransactionPhase</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BEFORE_COMMIT</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleUsersBeforeCommit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">text</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">BeforeCommit收到事件通知:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>事务发布类,用于在执行事务时发布事件,事务执行到不同阶段会触发相应的事务监听器,事务监听器可以获取 publish()发布事件。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">fly</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">service</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">AllArgsConstructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ApplicationEvent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ApplicationEventPublisher</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">stereotype</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Component</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">support</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionCallback</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">transaction</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">support</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">TransactionTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TxPublisher</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionTemplate</span><span style="color:#A6ACCD;"> transactionTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 事件发布器接口,用于发布Spring应用事件(ApplicationEvent)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ApplicationEventPublisher</span><span style="color:#A6ACCD;"> publisher</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">method</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       transactionTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TransactionCallback</span><span style="color:#89DDFF;">&lt;&gt;()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doInTransaction</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">TransactionStatus</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">status</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">               </span><span style="color:#676E95;font-style:italic;">// 执行业务逻辑...</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 发布事件</span></span>
<span class="line"><span style="color:#A6ACCD;">        publisher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">publishEvent</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CustomEvent</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CustomEvent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 自定义事件,继承自ApplicationEvent抽象类</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomEvent</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApplicationEvent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CustomEvent</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            super</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_2-事务的七种传播特性" tabindex="-1">2.事务的七种传播特性 <a class="header-anchor" href="#_2-事务的七种传播特性" aria-label="Permalink to &quot;2.事务的七种传播特性&quot;">​</a></h2><p>在 Spring 中,事务传播机制是控制多个事务方法之间相互调用的行为方式。Spring 中共支持 7 种事务传播机制,它们是：</p><ul><li>REQUIRED:默认传播行为,如果当前存在事务则加入,如果不存在则创建一个新事务。REQUIRED 适合大部分业务场景,可以提高系统的整体性能。</li><li>SUPPORTS:如果当前存在事务就加入,否则不使用事务。SUPPORTS 适合只读的业务方法,提高并发性能。</li><li>MANDATORY:强制要求当前存在事务,如果不存在就抛出异常。MANDATORY 适合强制要求当前存在事务的情况,例如有些操作必须在事务中才能执行。MANDATORY 适合强制要求当前存在事务的情况,例如有些操作必须在事务中才能执行。</li><li>REQUIRES_NEW:无论当前是否存在事务,都会创建一个新事务,如果存在则将当前事务挂起。REQUIRES_NEW 适合独立的业务操作,例如一个复杂的操作中需要多次提交,可以将其作为独立的事务操作。</li><li>NOT_SUPPORTED:无论当前是否存在事务,都不使用事务执行方法,如果存在则先将事务挂起。NOT_SUPPORTED 适合一些查询性质的操作,例如统计报表等。</li><li>NEVER:强制要求当前不存在事务,否则抛出异常。NEVER 适合强制要求当前不存在事务的情况,例如某些敏感操作。</li><li>NESTED:当前的事务会在外层事务的基础上创建一个嵌套事务,如果外层不存在事务,则创建新事务。如果嵌套事务独立提交,则会将自己的事务与外层分开,否则两者合并提交。NESTED 适合一些需要在原有事务的基础上进行嵌套的情况。</li></ul><h2 id="_3-spring-事务源码分析" tabindex="-1">3.Spring 事务源码分析 <a class="header-anchor" href="#_3-spring-事务源码分析" aria-label="Permalink to &quot;3.Spring 事务源码分析&quot;">​</a></h2><h2 id="_4-spring-事务失效的场景" tabindex="-1">4.Spring 事务失效的场景 <a class="header-anchor" href="#_4-spring-事务失效的场景" aria-label="Permalink to &quot;4.Spring 事务失效的场景&quot;">​</a></h2><h3 id="_4-1-事务方法访问权限问题" tabindex="-1">4.1 事务方法访问权限问题 <a class="header-anchor" href="#_4-1-事务方法访问权限问题" aria-label="Permalink to &quot;4.1 事务方法访问权限问题&quot;">​</a></h3><p>由于 Spring 事务是基于 Spring AOP 实现的,而 AOP 的本质是动态代理,在 Spring 事务底层源码中,如果代理的事务方法非 public 修饰,执行 computeTransactionAttribute()时就会返回 null,表示事务属性不存在,那么也不会执行事务逻辑,从而导致事务失效。</p><h3 id="_4-2-事务方法使用-final-或-static-关键字导致事务失效" tabindex="-1">4.2 事务方法使用 final 或 static 关键字导致事务失效 <a class="header-anchor" href="#_4-2-事务方法使用-final-或-static-关键字导致事务失效" aria-label="Permalink to &quot;4.2 事务方法使用 final 或 static 关键字导致事务失效&quot;">​</a></h3><p>如果一个方法被声明为 final 或 static,则该方法不能被子类重写,无法使用动态代理代理该方法,这会导致 Spring 无法生成事务代理对象来管理事务。因此,为了避免事务失效,因避免使用 final 或 static 修饰。</p><h3 id="_4-3-事务方法内部调用" tabindex="-1">4.3 事务方法内部调用 <a class="header-anchor" href="#_4-3-事务方法内部调用" aria-label="Permalink to &quot;4.3 事务方法内部调用&quot;">​</a></h3><p>Spring 事务是基于 Spring AOP 代理来实现的,在同一个类中,一个方法调用另一个方法时,调用方法时是直接调用目标对象的方法,而不是通过代理类调用,因此会导致事务不生效。解决办法:</p><ul><li>将调用方法分为多个类,在一个类方法中调用另一个类的方法。</li><li>通过 AopContext.currentProxy()获取当前代理对象,通过代理对象调用方法。</li></ul><h3 id="_4-4-事务方法所属类未被-spring-管理" tabindex="-1">4.4 事务方法所属类未被 Spring 管理 <a class="header-anchor" href="#_4-4-事务方法所属类未被-spring-管理" aria-label="Permalink to &quot;4.4 事务方法所属类未被 Spring 管理&quot;">​</a></h3><p>Spring 事务基于 Spring AOP 实现,也就是说 Spring IOC 容器获取 Bean 时,Spring 会为目标类创建代理处理事务,如果类未被 Spring 管理,Spring 找不到对应的 Bean,因此也无法创建代理类来处理事务。为了避免事务失效,应该将事务方法所属类注入 Spring IOC 容器,例如在类上添加@Service、@Component 等注解。</p><h3 id="_4-5-没有在-spring-中启用事务管理器" tabindex="-1">4.5 没有在 Spring 中启用事务管理器 <a class="header-anchor" href="#_4-5-没有在-spring-中启用事务管理器" aria-label="Permalink to &quot;4.5 没有在 Spring 中启用事务管理器&quot;">​</a></h3><p>Spring 事务管理器的作用是确保事务的一致性和完整性。当一个事务涉及多个数据库操作时,如果其中的任何一个操作失败,整个事务都应该被回滚,以保证数据的一致性和完整性。 Spring 事务管理器提供了一种简单而可靠的方式来管理这些操作,并确保它们被作为单个事务来处理。Spring 事务相关类如下:</p><ul><li>PlatformTransactionManager:该接口是所有 Spring 事务管理器的父接口,定义了基本的事务管理操作,例如:begin、commit、rollback。</li><li>DataSourceTransactionManager:该事务管理器适用于 JDBC。它使用传入的数据源来创建数据库连接,然后利用 JDBC 事务来管理一系列 SQL 操作。</li><li>HibernateTransactionManager:该事务管理器适用于 Hibernate。它使用传入的 Hibernate SessionFactory 来管理一系列 Hibernate 操作。</li><li>JpaTransactionManager:该事务管理器适用于 JPA。它使用传入的 JPA EntityManagerFactory 来管理一系列 JPA 操作。</li></ul><p>如果在 Spring 未启用事务管理器,即使在目标方法添加了@Transactional 注解,该方法也不会被 Spring 管理的事务代理拦截。注意:在 SpringBoot 中默认会自动配置事务管理器并开启事务支持。</p><h3 id="_4-6-多线程调用" tabindex="-1">4.6 多线程调用 <a class="header-anchor" href="#_4-6-多线程调用" aria-label="Permalink to &quot;4.6 多线程调用&quot;">​</a></h3><p>Spring 事务是基于线程绑定的,每个线程都有自己的事务上下文,而多线程环境下可能会存在多个线程共享同一事务上下文的情况,从而导致事务失效。在 Spring 事务管理器中,通过 TransactionSynchronizationManager 类来管理事务上下文。TransactionSynchronizationManager 内部维护了一个 ThreadLocal 对象,用来存储当前线程的事务上下文。在事务开始时,TransactionSynchronizationManager 会将事务上下文绑定到当前线程的 ThreadLocal 对象中,当事务结束时,TransactionSynchronizationManager 会将事务上下文从 ThreadLocal 对象中移除。</p><h3 id="_4-7-数据源不支持事务" tabindex="-1">4.7 数据源不支持事务 <a class="header-anchor" href="#_4-7-数据源不支持事务" aria-label="Permalink to &quot;4.7 数据源不支持事务&quot;">​</a></h3><p>Spring 的事务管理底层依赖于数据库本身的事务支持,如果数据源不支持事务,即使添加了 Spring 事务也不会生效,例如 Mysql 的 MyISAM 存储引擎。</p><h3 id="_4-8-配置错误的-transactional-注解" tabindex="-1">4.8 配置错误的@Transactional 注解 <a class="header-anchor" href="#_4-8-配置错误的-transactional-注解" aria-label="Permalink to &quot;4.8 配置错误的@Transactional 注解&quot;">​</a></h3><p>如果事务方法中使用了@Transactional(readOnly=true),但是在方法中进行了更新操作,此时会抛出异常导致事务失效。readOnly=true 表示一个只读事务,当在事务中更新对应数据时,会抛出异常,因此根据业务场景尽量将 readOnly 设置为 false,如果是读操作则设置为 true。</p><h3 id="_4-9-事务超时时间设置过短" tabindex="-1">4.9 事务超时时间设置过短 <a class="header-anchor" href="#_4-9-事务超时时间设置过短" aria-label="Permalink to &quot;4.9 事务超时时间设置过短&quot;">​</a></h3><p>如果设置了事务超时时间,但是执行业务耗时大于事务超时时间,则会出现事务超时,导致事务失效。对于这种情况可以不指定事务超时时间,或根据业务场景设置事务超时时间。</p><h3 id="_4-10-事务设置了错误的传播特性" tabindex="-1">4.10 事务设置了错误的传播特性 <a class="header-anchor" href="#_4-10-事务设置了错误的传播特性" aria-label="Permalink to &quot;4.10 事务设置了错误的传播特性&quot;">​</a></h3><p>在 Spring 中,事务传播机制是控制多个事务方法之间相互调用的行为方式。Spring 中共支持 7 种事务传播机制,它们是：</p><ul><li>REQUIRED:默认传播行为,如果当前存在事务则加入,如果不存在则创建一个新事务。REQUIRED 适合大部分业务场景,可以提高系统的整体性能。</li><li>SUPPORTS:如果当前存在事务就加入,否则不使用事务。SUPPORTS 适合只读的业务方法,提高并发性能。</li><li>MANDATORY:强制要求当前存在事务,如果不存在就抛出异常。MANDATORY 适合强制要求当前存在事务的情况,例如有些操作必须在事务中才能执行。MANDATORY 适合强制要求当前存在事务的情况,例如有些操作必须在事务中才能执行。</li><li>REQUIRES_NEW:无论当前是否存在事务,都会创建一个新事务,如果存在则将当前事务挂起。REQUIRES_NEW 适合独立的业务操作,例如一个复杂的操作中需要多次提交,可以将其作为独立的事务操作。</li><li>NOT_SUPPORTED:无论当前是否存在事务,都不使用事务执行方法,如果存在则先将事务挂起。NOT_SUPPORTED 适合一些查询性质的操作,例如统计报表等。</li><li>NEVER:强制要求当前不存在事务,否则抛出异常。NEVER 适合强制要求当前不存在事务的情况,例如某些敏感操作。</li><li>NESTED:当前的事务会在外层事务的基础上创建一个嵌套事务,如果外层不存在事务,则创建新事务。如果嵌套事务独立提交,则会将自己的事务与外层分开,否则两者合并提交。NESTED 适合一些需要在原有事务的基础上进行嵌套的情况。</li></ul><p>使用 NOT_SUPPORTED 传播特性不支持事务,因此在需要事务的场景下,因避免使用 NOT_SUPPORTED 传播特性。</p><h3 id="_4-11-事务方法内部处理了异常-导致异常无法对外抛出" tabindex="-1">4.11 事务方法内部处理了异常,导致异常无法对外抛出 <a class="header-anchor" href="#_4-11-事务方法内部处理了异常-导致异常无法对外抛出" aria-label="Permalink to &quot;4.11 事务方法内部处理了异常,导致异常无法对外抛出&quot;">​</a></h3><p>如果事务方法中发生的异常被捕获并处理,会导致异常无法正确的传播给事务管理器,从而导致事务失效。在 Spring 事务的 invokeWithinTransaction()方法中,当 Spring catch 到 Throwable 异常的时候,就会调用 completeTransactionAfterThrowing()方法进行事务回滚的逻辑。如果事务方法中发生的异常被捕获并处理,Spring 将无法捕获到异常,因此事务回滚的逻辑就不会执行,导致事务失效。在 Spring 事务方法中,当使用了 try/catch 处理异常时,应当在 catch 中抛出对应的异常。</p><h3 id="_4-12-手动抛出其他异常" tabindex="-1">4.12 手动抛出其他异常 <a class="header-anchor" href="#_4-12-手动抛出其他异常" aria-label="Permalink to &quot;4.12 手动抛出其他异常&quot;">​</a></h3><p>Spring 事务默认只处理 RuntimeException 和 Error,对于普通 Exception 并不会进行事务回滚,除非,使用 rollbackFor 属性指定配置,例如@Transactional(rollbackFor=Exception.class)。</p><h3 id="_4-13-手动抛出其他异常" tabindex="-1">4.13 手动抛出其他异常 <a class="header-anchor" href="#_4-13-手动抛出其他异常" aria-label="Permalink to &quot;4.13 手动抛出其他异常&quot;">​</a></h3><p>Spring 事务默认只处理 RuntimeException 和 Error,对于普通 Exception 并不会进行事务回滚,除非,使用 rollbackFor 属性指定配置,例如@Transactional(rollbackFor=Exception.class)。</p><h3 id="_4-14-事务注解被覆盖导致事务失效" tabindex="-1">4.14 事务注解被覆盖导致事务失效 <a class="header-anchor" href="#_4-14-事务注解被覆盖导致事务失效" aria-label="Permalink to &quot;4.14 事务注解被覆盖导致事务失效&quot;">​</a></h3><p>如果父类事务中使用了事务注解,子类重写父类的事务方法也使用了事务注解,此时子类方法中的事务注解会覆盖了父类的注解(例如子类事务方法和父类事务方法的传播行为不同),Spring 将不会在父类的方法中启用事务。</p><h3 id="_4-15-rollbackfor-属性配置错误" tabindex="-1">4.15 rollbackFor 属性配置错误 <a class="header-anchor" href="#_4-15-rollbackfor-属性配置错误" aria-label="Permalink to &quot;4.15 rollbackFor 属性配置错误&quot;">​</a></h3><p>Spring 事务注解的 rollbackFor 属性用于指定在哪些异常发生时需要回滚事务,当方法抛出 rollbackFor 属性中指定的异常或其子类异常时(rollbackFor 指定的异常只能是 Throwable 类或者其子类),事务将回滚;否则,事务不会回滚。该属性可以指定一个异常类或多个异常类,多个异常类以数组的形式指定。如果不指定 rollbackFor 属性,则默认情况下只有 RuntimeException 及其子类(如 Error)异常会触发事务回滚。如果事务方法中抛出的异常,不是 rollback 指定的异常类或及其子类,事务将不会生效。</p><h3 id="_4-16-嵌套事务回滚频繁" tabindex="-1">4.16 嵌套事务回滚频繁 <a class="header-anchor" href="#_4-16-嵌套事务回滚频繁" aria-label="Permalink to &quot;4.16 嵌套事务回滚频繁&quot;">​</a></h3><p>在 Spring 嵌套事务中,如果内层的事务方法出现了 RuntimeException 和 Error 异常并对外抛出,那么可能会导致外层的事务也会被回滚。</p>`,87),t=[o];function e(r,c,y,D,i,F){return a(),n("div",null,t)}const E=s(p,[["render",e]]);export{A as __pageData,E as default};
