import{_ as s,o as a,c as n,O as l}from"./chunks/framework.1e38657f.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"concurrency/jucLock.md","filePath":"concurrency/jucLock.md","lastUpdated":1708792908000}'),p={name:"concurrency/jucLock.md"},o=l(`<p>与 Java 内置锁不同,JUC 包提供了一系列基于纯 Java 语言实现的锁,这种锁使用非常灵活,可以进行无条件的、可轮训的、定时的、可中断的锁获取和释放操作。由于 JUC 提供的锁在加锁和释放锁的方法都是通过 Java API 显式进行的,因此也叫显式锁。</p><h2 id="_1-显示锁的介绍" tabindex="-1">1.显示锁的介绍 <a class="header-anchor" href="#_1-显示锁的介绍" aria-label="Permalink to &quot;1.显示锁的介绍&quot;">​</a></h2><p>使用 JVM 内置锁时,无需通过 Java 代码显式地对同步对象的监视器进行抢占和释放,这些工作都交由 JVM 底层完成,而且任何一个 Java 对象都能作为内置锁使用,因此使用比较简单,但是 JVM 内置锁功能单一,不支持锁的一些高级功能,例如:</p><ul><li>限时抢锁:在抢锁时设置超时时间,如果超时后还未获得锁则应放弃锁的获取,以避免无限期的等待获取锁资源。</li><li>可中断抢锁:在抢锁时,外部线程给抢锁线程发送一个中断信号,就能唤醒等待锁的线程,并终止抢占锁的过程。</li><li>多个等待队列:为锁维持多个等待队列,以便提交抢占锁的效率。例如在生产者-消费者模式中,生产者和消费者共用同一把锁,该锁应维持两个等待队列,一个生产者队列和一个消费者队列。</li></ul><p>除了以上问题外,JVM 内置锁还存在性能问题,在竞争激烈的情况下,Java 对象锁会膨胀升级为重量级锁(重量级锁基于操作系统的 Mutex Lock 实现),而重量级锁的线程阻塞和唤醒操作都需要进程在内核态和用户态之间来回切换,因此性能比较差。为了解决 JVM 锁高级特性和锁竞争激烈情况下的性能问题,Java 提供了显式锁。</p><h3 id="_1-1-lock-接口" tabindex="-1">1.1 Lock 接口 <a class="header-anchor" href="#_1-1-lock-接口" aria-label="Permalink to &quot;1.1 Lock 接口&quot;">​</a></h3><p>Lock 接口是 java.util.concurrent.locks 包下的一个显式锁抽象接口,Lock 接口提供如下方法:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 抢锁。若成功则向下执行,若失败则阻塞抢锁线程</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可中断抢锁,当前线程在抢锁的过程中可以响应中断信号</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lockInterruptibly</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> throws InterruptedException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 尝试抢锁,线程为非阻塞模式.在调用tryLock()方法后立即返回。抢锁成功返回true,否则返回false</span></span>
<span class="line"><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tryLock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 限时抢锁,当到达超时时间(time)后返回false,并且此限时抢锁方法也可以响应中断信号</span></span>
<span class="line"><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tryLock</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TimeUnit</span><span style="color:#A6ACCD;"> unit</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws InterruptedException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 释放锁,为了正常释放锁资源(避免死锁),通常在try代码块中使用lock()或tryLock()抢占锁,在finally代码中使用unlock()释放锁</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unlock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取与显式锁绑定的Condition对象,用于&quot;等待-通知&quot;方式的线程间通信</span></span>
<span class="line"><span style="color:#C792EA;">Condition</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newCondition</span><span style="color:#89DDFF;">();</span></span></code></pre></div><p>相较于 JVM 内置锁,显式锁具有如下优势:</p><ul><li>可中断获取锁:使用 synchronized 关键字获取锁时,如果线程没有获取到锁则一直被阻塞,阻塞期间该线程无法响应中断信号,而调用 Lock.lockInterruptibly()方法获取锁时,如果线程被中断,线程将抛出 InterruptedException(中断异常)。</li><li>可非阻塞获取锁:使用 synchronzied 关键字获取锁时,如果获取锁失败,那么线程会被一直阻塞;而调用 Lock.tryLock()获取锁时,如果获取锁失败,线程不会被阻塞,而是直接返回 false。</li><li>可限时抢锁:tryLock(long time, TimeUnit unit)可以设置限定抢占锁的超时时间,而 synchronized 关键字获取锁时,如果抢不到锁,线程只能无限期阻塞等待。</li></ul><p>在使用 Lock 接口抢占或释放锁时需要注意如下事项:</p><ul><li>释放锁操作 Lock.unlock()必须在异常处理的 finally 代码块中执行,否则,如果临界区代码抛出异常,锁可能永远得不到释放,导致其他线程获取不到锁资源一直等待或死锁。</li><li>抢占锁操作 Lock.lock()必须在 try 代码块之外,第一 lock()方法没有申明抛出异常,第二 lock()方法并不一定能够抢占锁成功,在抢占锁失败的情况下去释放锁,可能会导致运行时异常。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * lock()抢占锁和unlock()释放锁模板</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">Lock</span><span style="color:#A6ACCD;"> lock </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ReentrantLock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">lock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lock</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 加锁</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 加锁成功,执行临界区代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    lock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unlock</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 释放锁</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * tryLock()抢占锁和unlock()释放锁模板</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">Lock</span><span style="color:#A6ACCD;"> lock </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ReentrantLock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 尝试加锁</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tryLock</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 加锁成功,执行临界区代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        lock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unlock</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 释放锁</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 加锁失败</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 尝试限时加锁,抢占锁时阻塞1s</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tryLock</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">TimeUnit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SECONDS</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 加锁成功,执行临界区代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        lock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unlock</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 释放锁</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 加锁失败</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_1-2-可重入锁-reentrantlock" tabindex="-1">1.2 可重入锁 ReentrantLock <a class="header-anchor" href="#_1-2-可重入锁-reentrantlock" aria-label="Permalink to &quot;1.2 可重入锁 ReentrantLock&quot;">​</a></h3><p>ReentrantLock 是 JUC 包提供的显式锁的一个基础实现,ReentrantLock 实现了 Lock 接口,它拥有与 synchronized 相同的并发性和内存语义,具备限时抢占、可中断抢占等一些锁的高级特性。此外 ReentrantLock 基于抽象队列同步器(Abstract Queued Synchroinzed,简称 AQS)实现,在锁竞争激烈的情况下,性能比 JVM 内置锁更好。ReentrantLock 是一个可重入的独占锁(互斥锁),其特点如下:</p><ul><li>可重入:表示该锁能够支持一个线程对资源的重复加锁,简单来说,一个线程可以多次进入同一个锁所同步的临界区代码块。例如,同一线程在外层方法获取锁后,在内层方法能再次获取该锁,甚至多次抢占同一把锁。</li><li>独占:在同一时刻只能有一个线程获取锁,其他线程阻塞等待获取锁,只有当持有锁的线程释放锁后,其他线程才能获取该锁。</li></ul><p>ReentrantLocka 使用示例:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReentrantLockExample</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 创建一把ReentrantLock锁</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ReentrantLock</span><span style="color:#A6ACCD;"> LOCK </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ReentrantLock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建线程1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 加锁,其他线程进入阻塞状态排队等待获取锁</span></span>
<span class="line"><span style="color:#A6ACCD;">            LOCK</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程1获取锁</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 调用内层方法,验证ReentrantLock锁的可重入性</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">lockReentrantMethod</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程1释放锁</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 释放锁,其他线程竞争锁</span></span>
<span class="line"><span style="color:#A6ACCD;">                LOCK</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unlock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}).</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建线程2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 加锁</span></span>
<span class="line"><span style="color:#A6ACCD;">            LOCK</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程2获取锁</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 使当前线程休眠2s</span></span>
<span class="line"><span style="color:#A6ACCD;">                Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程2释放锁</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 释放锁</span></span>
<span class="line"><span style="color:#A6ACCD;">                LOCK</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unlock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}).</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 锁重入方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lockReentrantMethod</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 加锁</span></span>
<span class="line"><span style="color:#A6ACCD;">        LOCK</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">内部方法lockReentrantMethod获取锁</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 释放锁</span></span>
<span class="line"><span style="color:#A6ACCD;">            LOCK</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unlock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 执行结果如下:</span></span>
<span class="line"><span style="color:#A6ACCD;">线程1获取锁</span></span>
<span class="line"><span style="color:#A6ACCD;">内部方法lockReentrantMethod获取锁</span></span>
<span class="line"><span style="color:#A6ACCD;">线程1释放锁</span></span>
<span class="line"><span style="color:#A6ACCD;">线程2获取锁</span></span>
<span class="line"><span style="color:#A6ACCD;">线程2释放锁</span></span></code></pre></div><p>在上述例子中,启动了线程 1 和线程 2 两个线程,线程 1 使用 lock()对当前线程进行加锁操作,其内部调用了 lockReentrantMethod()方法。从执行结果来看,lockReentrantMethod()方法也获取了锁资源,这表明 ReentrantLock 支持锁的可重入(一个线程允许持有一把锁多次进入同一临界区代码),只要线程释放锁的次数与获取锁的次数相同,都支持锁的可重入。</p><h3 id="_1-3-基于显式锁实现-等待-通知-方式进行线程通信" tabindex="-1">1.3 基于显式锁实现&quot;等待-通知&quot;方式进行线程通信 <a class="header-anchor" href="#_1-3-基于显式锁实现-等待-通知-方式进行线程通信" aria-label="Permalink to &quot;1.3 基于显式锁实现&quot;等待-通知&quot;方式进行线程通信&quot;">​</a></h3><h3 id="_1-4-locksupport" tabindex="-1">1.4 LockSupport <a class="header-anchor" href="#_1-4-locksupport" aria-label="Permalink to &quot;1.4 LockSupport&quot;">​</a></h3><p>LockSupport 是 JUC 提供的一个线程阻塞与唤醒工具类,该类可以让线程在任意位置阻塞和唤醒。LockSupport 提供了一系列静态方法用于阻塞和唤醒线程:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 用于无限期的阻塞当前线程。park意为停车,如果将Thread当做一辆车,park()方法用于停止车辆</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">park</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 唤醒某个被阻塞的线程</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unpark</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> thread</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 使当前线程进入休眠状态,阻塞一段指定的纳秒时间。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - blocker:表示关联休眠线程和一个特定的阻塞对象。阻塞对象是一个任意的对象,用于标识线程为何被阻塞,有利于调试和监控。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - nanos:线程休眠的纳秒数。如果 nanos 为零或负数,则调用没有效果。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parkNanos</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> blocker</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> nanos</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 禁用当前线程,直到指定的截止日期</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parkUntil</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> blocker</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> deadline</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 无限期的阻塞当前线程,直到它被另一个线程取消停放或中断,blocker关联等待线程和一个特定的阻塞对象</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">park</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> blocker</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取与给定线程的当前阻塞操作关联的Blocker对象</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getBlocker</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre></div><p>LockSupport 阻塞唤醒示例:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LockSupportExample</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建线程1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> thread01 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程1开始执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 阻塞当前线程</span></span>
<span class="line"><span style="color:#A6ACCD;">            LockSupport</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">park</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程1执行完成</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">        thread01</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建线程2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程2开始执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 当前线程休眠2s</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RuntimeException</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程2执行完成</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 唤醒线程1</span></span>
<span class="line"><span style="color:#A6ACCD;">            LockSupport</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unpark</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">thread01</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}).</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 执行结果如下:</span></span>
<span class="line"><span style="color:#A6ACCD;">线程1开始执行</span></span>
<span class="line"><span style="color:#A6ACCD;">线程2开始执行 </span><span style="color:#676E95;font-style:italic;">// 延迟2s输出线程2执行完成</span></span>
<span class="line"><span style="color:#A6ACCD;">线程2执行完成</span></span>
<span class="line"><span style="color:#A6ACCD;">线程1执行完成</span></span></code></pre></div><p>虽然 Thread.sleep()与 LockSupport.park()都可以使线程处于阻塞状态(两者都不会释放锁),但两者区别如下:</p><ul><li>Thread.sleep()无法从外部唤醒,只能达到睡眠时间自动唤醒,而 LockSupport.park()方法阻塞的线程可以使用 LockSupport.unpark()手动唤醒。</li><li>Thread.sleep()声明了 InterruptedException 中断异常,调用者需要捕获该异常,而 LockSupport.park()方法没有声明异常,调用时无需捕获异常。</li><li>当使用 LockSupport.park()或 Thread.sleep()方法阻塞的线程时,被阻塞的线程调用 Thread.interrupt()中断线程(设置中断标志),Thread.sleep()会抛出 InterruptedException 异常,而 LockSupport.park()不会抛出异常。</li><li>Thread.sleep()是一个 native 方法,而 LockSupport.park()是一个普通方法,其底层依赖于 Unsafe 类的 park()Native 方法。</li><li>LockSupport.park()相较于 Thread.sleep()能更精准、灵活地阻塞和唤醒线程,而且 LockSupport.park()允许设置一个 Blocker 对象,用于供监视工具或诊断工具确定线程被阻塞的原因。</li></ul><p>Object.wait()与 LockSupport.park()功能类似,都可以使线程处于阻塞状态(LockSupport.park()不会释放锁),但两者区别如下:</p><ul><li>Object.wait()方法必须在 synchronzied 块中调用,而 LockSupport.park()允许在任意位置调用。</li><li>调用 Object.wait()会释放锁,而 LockSupport.park()不会释放锁。</li><li>Object.wait()方法声明了 InterruptedException 异常,调用者需要捕获该异常,而 LockSupport.park()方法没有声明异常,调用时无需捕获异常。</li><li>当线程在没有调用 Object.wait()阻塞前调用 Object.notify()唤醒(即在调用 wait 方法前调用 notify 方法),则会抛出 IllegalMonitorStateException 异常,而 LockSupport.park()不会抛出任何异常。</li></ul><h3 id="_1-5-显式锁的分类" tabindex="-1">1.5 显式锁的分类 <a class="header-anchor" href="#_1-5-显式锁的分类" aria-label="Permalink to &quot;1.5 显式锁的分类&quot;">​</a></h3><p>JUC 提供的显式锁中类繁多,大概分为以下几种:可重入锁和不可重入锁、悲观锁和乐观锁、公平锁和非公平锁、共享锁和独占锁、可中断锁和不中断锁。</p><h4 id="_1-5-1-可重入锁和不可重入锁" tabindex="-1">1.5.1 可重入锁和不可重入锁 <a class="header-anchor" href="#_1-5-1-可重入锁和不可重入锁" aria-label="Permalink to &quot;1.5.1 可重入锁和不可重入锁&quot;">​</a></h4><p>可重入锁(Reentrant Lock)和不可重入锁是两种不同的锁的概念,它们主要涉及到同一个线程对同一个锁的多次获取。</p><ul><li>可重入锁:可重入锁允许同一个线程多次获得同一把锁。也就是说,当一个线程获得了锁之后,可以再次获得而不会被阻塞。这种锁的机制可以防止自己阻塞,允许线程在已经拥有锁的情况下继续获取该锁。例如 ReentrantLock 就是一个典型的可重入锁,在同一个线程内,可以多次调用 lock() 方法,而不会出现死锁。</li><li>不可重入锁:不可重入锁是指一个线程在持有锁的情况下,再次去获取该锁会造成死锁或阻塞。如果一个线程已经获得了锁,再次请求该锁时就会被阻塞,即使是同一个线程。例如 synchronized 关键字就是一个不可重入锁,如果一个线程已经获得了某个对象的锁,再次请求时会被阻塞,直到其他线程释放了这个锁。</li></ul><h4 id="_1-5-2-悲观锁和乐观锁" tabindex="-1">1.5.2 悲观锁和乐观锁 <a class="header-anchor" href="#_1-5-2-悲观锁和乐观锁" aria-label="Permalink to &quot;1.5.2 悲观锁和乐观锁&quot;">​</a></h4><p>从线程进入临界区前是否锁住同步资源的角色来分,显式锁可分为悲观锁和乐观锁。</p><ul><li>悲观锁:悲观锁认为在并发环境中,总是会有其他线程来竞争同一个资源,因此在访问共享资源之前,悲观锁会先获取锁,阻塞其他线程的访问,确保当前线程独占资源。因此悲观锁适用于并发更新的概率较高,而且对数据完整性要求很高的场景。例如 synchronized 和 ReentrantLock 都是悲观锁的典型实现,当一个线程获取了锁,其他线程就需要等待锁的释放。</li><li>乐观锁:乐观锁假设在并发环境中,不会有太多线程竞争同一个资源,因此在访问共享资源之前,并不获取锁。相反,它先进行操作,然后在更新时检查是否有其他线程对资源进行了修改。如果没有,操作成功;如果有,需要进行相应的冲突解决(通常是回滚操作)。因此乐观锁适用于并发更新的概率较低,而且对性能要求较高的场景。</li></ul><p>Java 中的乐观锁基本基于 CAS 自旋操作实现的,CAS 是一种更新操作,比较当前值跟传入值是否相同,若是则更新,否则失败。因此在争用激烈的情况下,CAS 自旋会出现大量空自旋,会导致乐观锁的性能下降。JUC 提供的显式锁为了减少 CAS 空自旋,提升锁的性能,其底层基于 AQS 实现,AQS 通过队列的方式很多程度上减少了锁的争用,极大的减少了 CAS 空自旋。即使在锁竞争激烈的场景下,基于 AQS 的乐观锁比悲观锁性能更好。</p><h4 id="_1-5-3-公平锁和非公平锁" tabindex="-1">1.5.3 公平锁和非公平锁 <a class="header-anchor" href="#_1-5-3-公平锁和非公平锁" aria-label="Permalink to &quot;1.5.3 公平锁和非公平锁&quot;">​</a></h4><p>从多个线程竞争锁时的获取顺序的角度来看,显式锁被分为公平锁和非公平锁:</p><ul><li>公平锁:公平锁是一种获取锁的方式,它遵循先来先服务的原则。在多个线程竞争同一个锁的情况下,公平锁会按照线程的请求顺序依次获取锁。即等待时间最长的线程会优先获得锁。公平锁保证了线程获取锁的公平性,避免了某些线程长时间无法获得锁的情况。公平锁适用于对锁的获取顺序要求较高的场景,由于需要根据顺序依次获取锁,性能相较于非公平锁要差。在 Java 中,ReentrantLock 可以实现公平锁,通过在创建锁时传入 true 来表示创建公平锁,例如<code>ReentrantLock lock = new ReentrantLock(true)</code>来创建一把具有可重入性的公平锁。</li><li>非公平锁:非公平锁是一种获取锁的方式,它并不考虑等待队列中的线程的顺序,而是允许&quot;插队&quot;。即新来的线程有可能在等待队列中的某个位置直接获取锁,而不考虑其他等待时间更长的线程,可能导致某些线程长时间无法获得锁。非公平锁适用于对性能要求且吞吐量高的场景。在 Java 中,ReentrantLock 默认是一把非公平锁。</li></ul><h4 id="_1-5-4-可中断锁和不可中断锁" tabindex="-1">1.5.4 可中断锁和不可中断锁 <a class="header-anchor" href="#_1-5-4-可中断锁和不可中断锁" aria-label="Permalink to &quot;1.5.4 可中断锁和不可中断锁&quot;">​</a></h4><p>当线程持有锁时,是否允许其他线程对其进行中断的角度来分区,可分为可中断锁和不可中断锁:</p><ul><li>可中断锁:可中断锁是一种允许线程在等待获取锁的过程中被中断的锁。如果一个线程在等待锁时被中断,它会收到一个 InterruptedException,从而有机会处理中断请求。 JUC 的显式锁属于可中断锁(如 ReentrantLock)。</li><li>不可中断锁:不可中断锁是一种在等待获取锁的过程中不响应中断的锁。即使线程被中断,它仍然会继续等待锁,不会抛出 InterruptedException。例如 synchronized 就是一把不可中断锁。</li></ul><h4 id="_1-5-5-共享锁和独占锁" tabindex="-1">1.5.5 共享锁和独占锁 <a class="header-anchor" href="#_1-5-5-共享锁和独占锁" aria-label="Permalink to &quot;1.5.5 共享锁和独占锁&quot;">​</a></h4><p>从控制对共享资源的访问的角度来看,JUC 显式锁可分为共享锁和独占锁:</p><ul><li>共享锁:共享锁是一种允许多个线程同时持有的锁。当一个线程持有共享锁时,其他线程也可以持有相同的共享锁,这样多个线程可以同时读取共享资源而不会相互影响。在 Java 中，ReentrantReadWriteLock 是一个典型的实现共享锁和独占锁的锁,通过 readLock()方法获取共享锁,通过 writeLock()方法获取独占锁。共享锁适用于对共享资源的读操作远远多于写操作的场景,这种场景下共享锁可以大幅度提高并发性能。</li><li>独占锁:独占锁是一种在任意时刻只允许一个线程持有的锁。当一个线程持有独占锁时,其他线程无法获得相同的锁,直到持有锁的线程释放它。在 Java 中,synchronized 和 ReentrantLock 都属于独占锁。独占锁适用于对共享资源的写操作较为频繁,且需要保证写操作的原子性的场景。</li></ul><h2 id="_2-悲观锁和乐观锁" tabindex="-1">2.悲观锁和乐观锁 <a class="header-anchor" href="#_2-悲观锁和乐观锁" aria-label="Permalink to &quot;2.悲观锁和乐观锁&quot;">​</a></h2><h3 id="_2-1-悲观锁的缺点" tabindex="-1">2.1 悲观锁的缺点 <a class="header-anchor" href="#_2-1-悲观锁的缺点" aria-label="Permalink to &quot;2.1 悲观锁的缺点&quot;">​</a></h3><h3 id="_2-2-基于-cas-实现乐观锁" tabindex="-1">2.2 基于 CAS 实现乐观锁 <a class="header-anchor" href="#_2-2-基于-cas-实现乐观锁" aria-label="Permalink to &quot;2.2 基于 CAS 实现乐观锁&quot;">​</a></h3><h3 id="_2-3-实现不可重入的自旋锁" tabindex="-1">2.3 实现不可重入的自旋锁 <a class="header-anchor" href="#_2-3-实现不可重入的自旋锁" aria-label="Permalink to &quot;2.3 实现不可重入的自旋锁&quot;">​</a></h3><h3 id="_2-4-实现可重入的自旋锁" tabindex="-1">2.4 实现可重入的自旋锁 <a class="header-anchor" href="#_2-4-实现可重入的自旋锁" aria-label="Permalink to &quot;2.4 实现可重入的自旋锁&quot;">​</a></h3><h2 id="_3-公平锁和非公平锁" tabindex="-1">3.公平锁和非公平锁 <a class="header-anchor" href="#_3-公平锁和非公平锁" aria-label="Permalink to &quot;3.公平锁和非公平锁&quot;">​</a></h2><h2 id="_4-共享锁和独占锁" tabindex="-1">4.共享锁和独占锁 <a class="header-anchor" href="#_4-共享锁和独占锁" aria-label="Permalink to &quot;4.共享锁和独占锁&quot;">​</a></h2><h2 id="_5-可中断锁和不中断锁" tabindex="-1">5.可中断锁和不中断锁 <a class="header-anchor" href="#_5-可中断锁和不中断锁" aria-label="Permalink to &quot;5.可中断锁和不中断锁&quot;">​</a></h2><h2 id="_6-读写锁" tabindex="-1">6.读写锁 <a class="header-anchor" href="#_6-读写锁" aria-label="Permalink to &quot;6.读写锁&quot;">​</a></h2>`,58),t=[o];function e(c,r,y,D,i,F){return a(),n("div",null,t)}const u=s(p,[["render",e]]);export{C as __pageData,u as default};
