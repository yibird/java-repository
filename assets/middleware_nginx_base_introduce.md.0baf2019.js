import{_ as i,o as e,c as n,O as t}from"./chunks/framework.1e38657f.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"middleware/nginx/base/introduce.md","filePath":"middleware/nginx/base/introduce.md","lastUpdated":1708792908000}'),l={name:"middleware/nginx/base/introduce.md"},o=t("<p>Nginx（发音为&quot;engine-x&quot;）是一款开源的高性能的 Web 服务器和反向代理服务器。它最初由俄罗斯的工程师 Igor Sysoev 开发,并在 2004 年首次发布。Nginx 最初设计的目标是解决 C10k（Concurrent 10,000 Connections）问题,即同时处理大量并发连接的能力。与传统的服务器相比,Nginx 使用异步、事件驱动的方式处理连接,以最大限度地提高并发性能和资源利用率。Nginx 的主要特点:</p><ul><li>高性能:Nginx 采用非阻塞的事件驱动架构,可以高效地处理大量并发连接。它具有出色的性能表现,能够在高负载的情况下快速、稳定地处理请求。</li><li>反向代理:Nginx 可以作为反向代理服务器,接收客户端的请求并将请求转发给后端的多个服务器。它可以实现负载均衡、缓存、SSL 终端等功能,提高网站的可用性和性能。</li><li>静态文件服务:Nginx 可以高效地提供静态文件的服务,包括 HTML、CSS、JavaScript、图片等。它通过使用内存缓存和 sendfile 等技术,能够快速地向客户端提供静态文件,减轻后端应用服务器的负载。</li><li>可扩展性:Nginx 具有良好的可扩展性,可以通过添加模块来扩展功能。它支持第三方模块的开发和集成,使其具备更多的扩展能力。</li><li>轻量级:Nginx 的设计目标之一是轻量级和资源消耗低。它占用较少的内存和处理器资源,适合用于低配置的服务器环境。</li></ul><p>由于其高性能、可靠性和扩展性,Nginx 在互联网领域得到广泛应用。它常被用作 Web 服务器、反向代理、负载均衡器和缓存服务器等,成为构建高性能、可扩展的 Web 架构的重要组件之一。</p><p>Nginx 常用于以下场景:</p><ul><li>高并发的 Web 服务器:Nginx 的异步、事件驱动的架构使其能够高效地处理大量并发连接。它适用于需要快速响应请求并处理大量并发用户的 Web 服务器场景。</li><li>反向代理和负载均衡:Nginx 可以作为反向代理服务器,接收客户端的请求并将请求转发给后端的多个服务器。它具有负载均衡功能,可以在多个后端服务器之间分配请求,提高整体性能和可用性。</li><li>静态文件服务:Nginx 可以高效地提供静态文件的服务,如 HTML、CSS、JavaScript、图片等。它通过使用内存缓存和 sendfile 等技术,能够快速地向客户端提供静态文件,减轻后端应用服务器的负载。</li><li>缓存服务器:Nginx 具有内置的缓存功能,可以缓存动态页面或静态文件,减少对后端应用服务器的请求。它可以提高网站的性能和响应速度,降低对后端资源的依赖。</li><li>SSL/TLS 终端:Nginx 可以作为 SSL/TLS 终端,对客户端的加密连接进行解密,并将请求转发给后端的非加密服务器。这种方式可以减轻后端服务器的计算负载,提高性能。</li><li>WebSocket 代理:Nginx 支持 WebSocket 协议,并可以作为 WebSocket 的代理服务器。它可以接收 WebSocket 连接,并将请求转发给后端的 WebSocket 服务器,实现实时通信的功能。</li><li>API 网关:Nginx 可以作为 API 网关,集中处理和管理对多个后端 API 的请求。它可以进行请求转发、鉴权、流量控制、缓存等功能,提供统一的 API 接入点和管理能力。</li></ul>",5),a=[o];function c(r,s,d,_,x,S){return e(),n("div",null,a)}const p=i(l,[["render",c]]);export{N as __pageData,p as default};
